<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_41) on Fri May 03 14:32:37 EDT 2013 -->
<TITLE>
Terminal
</TITLE>

<META NAME="date" CONTENT="2013-05-03">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Terminal";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../ec/gp/push/PushProblem.html" title="class in ec.gp.push"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?ec/gp/push/Terminal.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Terminal.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
ec.gp.push</FONT>
<BR>
Class Terminal</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../ec/gp/GPNode.html" title="class in ec.gp">ec.gp.GPNode</A>
      <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../ec/gp/ERC.html" title="class in ec.gp">ec.gp.ERC</A>
          <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>ec.gp.push.Terminal</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../ec/gp/GPNodeParent.html" title="interface in ec.gp">GPNodeParent</A>, <A HREF="../../../ec/Prototype.html" title="interface in ec">Prototype</A>, <A HREF="../../../ec/Setup.html" title="interface in ec">Setup</A>, java.io.Serializable, java.lang.Cloneable</DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>Terminal</B><DT>extends <A HREF="../../../ec/gp/ERC.html" title="class in ec.gp">ERC</A></DL>
</PRE>

<P>
Terminal is the leaf node in Push trees and is used to represent Push
    instructions of all types.

    <p>ECJ implements Push's s-expressions as trees of nonterminals
    and terminals.  The nonterminals are all dummy instances of the Nonterminal class.
    Terminals are all instances of the Terminal class.

    <p>The nonterminals and terminals aren't actually evaluated.  Instead, the
    tree is printed out as a lisp s-expression and sent to the Push interpreter.

    <p>Terminals are implemented as ERCs which hold the actual Push instruction
    or atom as a string ('value').  There are four kinds of instructions at present:

    <ol>
    <li> Built-in Push instructions like float.* or integer.swap
    <li> Floating-point ERCs (defined by "float.erc")
    <li> Integer ERCs (defined by "integer.erc")
    <li> Custom Push instructions
    </ol>

    <p>You specify your instructions like this:

    <tt><pre>
    push.op.size = 7
    push.op.0 = float.erc
    push.op.1 = float.+

    # This is a custom instruction
    push.op.2 = float.print
    push.op.2.func = ec.gp.push.example.MyPushInstruction

    push.op.3 = float.%
    push.op.4 = float.-
    push.op.5 = float.dup
    push.op.6 = float.swap
    </pre></tt>

    <p>For the (at present) two kinds of ERCs, you can specify a minimum
    and a maximum value.  Here are the defaults:

    <tt><pre>
    push.op.float.min = -10
    push.op.float.max = 10
    push.op.int.min = -10
    push.op.int.max = 10
    </tt></pre>

    The full list of Psh instructions is:

    <p><tt>
    integer.+<br>
    integer.-<br>
    integer./<br>
    integer.\%<br>
    integer.*<br>
    integer.pow<br>
    integer.log<br>
    integer.=<br>
    integer.><br>
    integer.*lt;<br>
    integer.min<br>
    integer.max<br>
    integer.abs<br>
    integer.neg<br>
    integer.ln<br>
    integer.fromfloat<br>
    integer.fromboolean<br>
    integer.rand<br>
    float.+<br>
    float.-<br>
    float./<br>
    float.\%<br>
    float.*<br>
    float.pow<br>
    float.log<br>
    float.=<br>
    float.><br>
    float.&lt;<br>
    float.min<br>
    float.max<br>
    float.sin<br>
    float.cos<br>
    float.tan<br>
    float.exp<br>
    float.abs<br>
    float.neg<br>
    float.ln<br>
    float.frominteger<br>
    float.fromboolean<br>
    float.rand<br>
    boolean.=<br>
    boolean.not<br>
    boolean.and<br>
    boolean.or<br>
    boolean.xor<br>
    boolean.frominteger<br>
    boolean.fromfloat<br>
    boolean.rand<br>
    true<br>
    false<br>
    code.quote<br>
    code.fromboolean<br>
    code.frominteger<br>
    code.fromfloat<br>
    code.noop<br>
    code.do*times<br>
    code.do*count<br>
    code.do*range<br>
    code.=<br>
    code.if<br>
    code.rand<br>
    exec.k<br>
    exec.s<br>
    exec.y<br>
    exec.noop<br>
    exec.do*times<br>
    exec.do*count<br>
    exec.do*range<br>
    exec.=<br>
    exec.if<br>
    exec.rand<br>
    input.index<br>
    input.inall<br>
    input.inallrev<br>
    input.stackdepth<br>
    frame.push<br>
    frame.pop<br>
    </tt>


    <p><b>Parameters</b><br>
    <table>
    <tr><td valign=top><i>base</i>.<tt>op.size</tt><br>
    <font size=-1>int >= 1</font></td>
    <td valign=top>(Number of instructions in Push's internal "instruction set")</td></tr>
    <tr><td valign=top><i>base</i>.<tt>op</tt>.<i>i</i><br>
    <font size=-1>String</font></td>
    <td valign=top>(Name of instruction <i>i</i>)</td></tr>
    <tr><td valign=top><i>base</i>.<tt>op</tt>.<i>i</i>.<tt>func</tt><br>
    <font size=-1>classname, inherits and != ec.gp.push.PushInstruction</font></td>
    <td valign=top>(PushInstruction corresponding to instruction <i>i</i>, if it is a custom instruction)</td></tr>
    <tr><td valign=top><i>base</i>.<tt>op.float.min</tt><br>
    <font size=-1>float</font></td>
    <td valign=top>(Minimum value for a Push floating-point ERC)</td></tr>
    <tr><td valign=top><i>base</i>.<tt>op.float.max</tt><br>
    <font size=-1>float</font></td>
    <td valign=top>(Maximum value for a Push floating-point ERC)</td></tr>
    <tr><td valign=top><i>base</i>.<tt>op.int.min</tt><br>
    <font size=-1>int</font></td>
    <td valign=top>(Minimum value for a Push integer ERC)</td></tr>
    <tr><td valign=top><i>base</i>.<tt>op.int.max</tt><br>
    <font size=-1>int</font></td>
    <td valign=top>(Maximum value for a Push integer ERC)</td></tr>
    </table>

    <p><b>Default Base</b><br>
    gp.push
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../serialized-form.html#ec.gp.push.Terminal">Serialized Form</A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../ec/gp/push/PushInstruction.html" title="class in ec.gp.push">PushInstruction</A>[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#customInstructions">customInstructions</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A list of custom PushInstructions I can be set to.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#ERC_NAMES">ERC_NAMES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#FLOAT_ERC">FLOAT_ERC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#indices">indices</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For each PushInstruction, a pointer into instructions which gives the name of that instruction.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#instructions">instructions</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Names of all the Push instructions I can be set to.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#INTEGER_ERC">INTEGER_ERC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#maxFloatERC">maxFloatERC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#maxIntegerERC">maxIntegerERC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#minFloatERC">minFloatERC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#minIntegerERC">minIntegerERC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#P_FLOAT">P_FLOAT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#P_FUNC">P_FUNC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#P_INSTRUCTION">P_INSTRUCTION</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#P_INTEGER">P_INTEGER</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#P_MAX">P_MAX</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#P_MIN">P_MIN</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#P_NUM_INSTRUCTIONS">P_NUM_INSTRUCTIONS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_ec.gp.GPNode"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from class ec.gp.<A HREF="../../../ec/gp/GPNode.html" title="class in ec.gp">GPNode</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../ec/gp/GPNode.html#argposition">argposition</A>, <A HREF="../../../ec/gp/GPNode.html#children">children</A>, <A HREF="../../../ec/gp/GPNode.html#CHILDREN_UNKNOWN">CHILDREN_UNKNOWN</A>, <A HREF="../../../ec/gp/GPNode.html#constraints">constraints</A>, <A HREF="../../../ec/gp/GPNode.html#GPNODEPRINTTAB">GPNODEPRINTTAB</A>, <A HREF="../../../ec/gp/GPNode.html#MAXPRINTBYTES">MAXPRINTBYTES</A>, <A HREF="../../../ec/gp/GPNode.html#NODESEARCH_ALL">NODESEARCH_ALL</A>, <A HREF="../../../ec/gp/GPNode.html#NODESEARCH_CUSTOM">NODESEARCH_CUSTOM</A>, <A HREF="../../../ec/gp/GPNode.html#NODESEARCH_NONTERMINALS">NODESEARCH_NONTERMINALS</A>, <A HREF="../../../ec/gp/GPNode.html#NODESEARCH_TERMINALS">NODESEARCH_TERMINALS</A>, <A HREF="../../../ec/gp/GPNode.html#P_NODE">P_NODE</A>, <A HREF="../../../ec/gp/GPNode.html#P_NODECONSTRAINTS">P_NODECONSTRAINTS</A>, <A HREF="../../../ec/gp/GPNode.html#parent">parent</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#Terminal()">Terminal</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#decode(ec.util.DecodeReturn)">decode</A></B>(<A HREF="../../../ec/util/DecodeReturn.html" title="class in ec.util">DecodeReturn</A>&nbsp;dret)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Decodes data into the ERC from dret.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../ec/util/Parameter.html" title="class in ec.util">Parameter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#defaultBase()">defaultBase</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The default base for GPNodes -- defined even though
        GPNode is abstract so you don't have to in subclasses.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#encode()">encode</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Encodes data from the ERC, using ec.util.Code.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#eval(ec.EvolutionState, int, ec.gp.GPData, ec.gp.ADFStack, ec.gp.GPIndividual, ec.Problem)">eval</A></B>(<A HREF="../../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
     int&nbsp;thread,
     <A HREF="../../../ec/gp/GPData.html" title="class in ec.gp">GPData</A>&nbsp;input,
     <A HREF="../../../ec/gp/ADFStack.html" title="class in ec.gp">ADFStack</A>&nbsp;stack,
     <A HREF="../../../ec/gp/GPIndividual.html" title="class in ec.gp">GPIndividual</A>&nbsp;individual,
     <A HREF="../../../ec/Problem.html" title="class in ec">Problem</A>&nbsp;problem)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evaluates the node with the given thread, state, individual, problem, and stack.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#expectedChildren()">expectedChildren</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Usually ERCs don't have children, and this default implementation makes certain of it.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#name()">name</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the lowercase "name" of this ERC function class, some
        simple, short name which distinguishes this class from other ERC
        function classes you're using.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#nodeEquals(ec.gp.GPNode)">nodeEquals</A></B>(<A HREF="../../../ec/gp/GPNode.html" title="class in ec.gp">GPNode</A>&nbsp;other)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Implement this to do ERC-to-ERC comparisons.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#resetNode(ec.EvolutionState, int)">resetNode</A></B>(<A HREF="../../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
          int&nbsp;thread)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Remember to override this to randomize your ERC after it has been cloned.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></B>(<A HREF="../../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
      <A HREF="../../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets up a <i>prototypical</i> GPNode with those features all nodes of that
        prototype share, and nothing more.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../ec/gp/push/Terminal.html#toStringForHumans()">toStringForHumans</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You might want to override this to return a special human-readable version of the erc value; otherwise this defaults to toString();  This should be something that resembles a LISP atom.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_ec.gp.ERC"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class ec.gp.<A HREF="../../../ec/gp/ERC.html" title="class in ec.gp">ERC</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../ec/gp/ERC.html#mutateERC(ec.EvolutionState, int)">mutateERC</A>, <A HREF="../../../ec/gp/ERC.html#nodeHashCode()">nodeHashCode</A>, <A HREF="../../../ec/gp/ERC.html#readNode(ec.util.DecodeReturn)">readNode</A>, <A HREF="../../../ec/gp/ERC.html#readNode(ec.EvolutionState, java.io.DataInput)">readNode</A>, <A HREF="../../../ec/gp/ERC.html#toString()">toString</A>, <A HREF="../../../ec/gp/ERC.html#writeNode(ec.EvolutionState, java.io.DataOutput)">writeNode</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_ec.gp.GPNode"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class ec.gp.<A HREF="../../../ec/gp/GPNode.html" title="class in ec.gp">GPNode</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../../ec/gp/GPNode.html#atDepth()">atDepth</A>, <A HREF="../../../ec/gp/GPNode.html#checkConstraints(ec.EvolutionState, int, ec.gp.GPIndividual, ec.util.Parameter)">checkConstraints</A>, <A HREF="../../../ec/gp/GPNode.html#clone()">clone</A>, <A HREF="../../../ec/gp/GPNode.html#cloneReplacing()">cloneReplacing</A>, <A HREF="../../../ec/gp/GPNode.html#cloneReplacing(ec.gp.GPNode[], ec.gp.GPNode[])">cloneReplacing</A>, <A HREF="../../../ec/gp/GPNode.html#cloneReplacing(ec.gp.GPNode, ec.gp.GPNode)">cloneReplacing</A>, <A HREF="../../../ec/gp/GPNode.html#cloneReplacingAtomic(ec.gp.GPNode[], ec.gp.GPNode[])">cloneReplacingAtomic</A>, <A HREF="../../../ec/gp/GPNode.html#cloneReplacingAtomic(ec.gp.GPNode, ec.gp.GPNode)">cloneReplacingAtomic</A>, <A HREF="../../../ec/gp/GPNode.html#cloneReplacingNoSubclone(ec.gp.GPNode, ec.gp.GPNode)">cloneReplacingNoSubclone</A>, <A HREF="../../../ec/gp/GPNode.html#constraints(ec.gp.GPInitializer)">constraints</A>, <A HREF="../../../ec/gp/GPNode.html#contains(ec.gp.GPNode)">contains</A>, <A HREF="../../../ec/gp/GPNode.html#depth()">depth</A>, <A HREF="../../../ec/gp/GPNode.html#errorInfo()">errorInfo</A>, <A HREF="../../../ec/gp/GPNode.html#lightClone()">lightClone</A>, <A HREF="../../../ec/gp/GPNode.html#makeCTree(boolean, boolean, boolean)">makeCTree</A>, <A HREF="../../../ec/gp/GPNode.html#makeGraphvizSubtree(java.lang.String)">makeGraphvizSubtree</A>, <A HREF="../../../ec/gp/GPNode.html#makeGraphvizTree()">makeGraphvizTree</A>, <A HREF="../../../ec/gp/GPNode.html#makeLatexTree()">makeLatexTree</A>, <A HREF="../../../ec/gp/GPNode.html#makeLispTree()">makeLispTree</A>, <A HREF="../../../ec/gp/GPNode.html#makeLispTree(java.lang.StringBuilder)">makeLispTree</A>, <A HREF="../../../ec/gp/GPNode.html#nodeEquivalentTo(ec.gp.GPNode)">nodeEquivalentTo</A>, <A HREF="../../../ec/gp/GPNode.html#nodeInPosition(int, ec.gp.GPNodeGatherer, int)">nodeInPosition</A>, <A HREF="../../../ec/gp/GPNode.html#numNodes(ec.gp.GPNodeGatherer)">numNodes</A>, <A HREF="../../../ec/gp/GPNode.html#numNodes(int)">numNodes</A>, <A HREF="../../../ec/gp/GPNode.html#parentType(ec.gp.GPInitializer)">parentType</A>, <A HREF="../../../ec/gp/GPNode.html#pathLength(int)">pathLength</A>, <A HREF="../../../ec/gp/GPNode.html#printNode(ec.EvolutionState, int)">printNode</A>, <A HREF="../../../ec/gp/GPNode.html#printNode(ec.EvolutionState, int, int)">printNode</A>, <A HREF="../../../ec/gp/GPNode.html#printNode(ec.EvolutionState, java.io.PrintWriter)">printNode</A>, <A HREF="../../../ec/gp/GPNode.html#printNodeForHumans(ec.EvolutionState, int)">printNodeForHumans</A>, <A HREF="../../../ec/gp/GPNode.html#printNodeForHumans(ec.EvolutionState, int, int)">printNodeForHumans</A>, <A HREF="../../../ec/gp/GPNode.html#printRootedTree(ec.EvolutionState, int, int)">printRootedTree</A>, <A HREF="../../../ec/gp/GPNode.html#printRootedTree(ec.EvolutionState, int, int, int)">printRootedTree</A>, <A HREF="../../../ec/gp/GPNode.html#printRootedTree(ec.EvolutionState, java.io.PrintWriter, int)">printRootedTree</A>, <A HREF="../../../ec/gp/GPNode.html#printRootedTreeForHumans(ec.EvolutionState, int, int, int)">printRootedTreeForHumans</A>, <A HREF="../../../ec/gp/GPNode.html#printRootedTreeForHumans(ec.EvolutionState, int, int, int, int)">printRootedTreeForHumans</A>, <A HREF="../../../ec/gp/GPNode.html#readRootedTree(ec.EvolutionState, java.io.DataInput, ec.gp.GPType, ec.gp.GPFunctionSet, ec.gp.GPNodeParent, int)">readRootedTree</A>, <A HREF="../../../ec/gp/GPNode.html#readRootedTree(int, ec.util.DecodeReturn, ec.gp.GPType, ec.gp.GPFunctionSet, ec.gp.GPNodeParent, int, ec.EvolutionState)">readRootedTree</A>, <A HREF="../../../ec/gp/GPNode.html#replaceWith(ec.gp.GPNode)">replaceWith</A>, <A HREF="../../../ec/gp/GPNode.html#rootedTreeEquals(ec.gp.GPNode)">rootedTreeEquals</A>, <A HREF="../../../ec/gp/GPNode.html#rootedTreeHashCode()">rootedTreeHashCode</A>, <A HREF="../../../ec/gp/GPNode.html#rootParent()">rootParent</A>, <A HREF="../../../ec/gp/GPNode.html#swapCompatibleWith(ec.gp.GPInitializer, ec.gp.GPNode)">swapCompatibleWith</A>, <A HREF="../../../ec/gp/GPNode.html#toStringForError()">toStringForError</A>, <A HREF="../../../ec/gp/GPNode.html#writeRootedTree(ec.EvolutionState, ec.gp.GPType, ec.gp.GPFunctionSet, java.io.DataOutput)">writeRootedTree</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="P_INSTRUCTION"><!-- --></A><H3>
P_INSTRUCTION</H3>
<PRE>
public static final java.lang.String <B>P_INSTRUCTION</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#ec.gp.push.Terminal.P_INSTRUCTION">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_NUM_INSTRUCTIONS"><!-- --></A><H3>
P_NUM_INSTRUCTIONS</H3>
<PRE>
public static final java.lang.String <B>P_NUM_INSTRUCTIONS</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#ec.gp.push.Terminal.P_NUM_INSTRUCTIONS">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_FUNC"><!-- --></A><H3>
P_FUNC</H3>
<PRE>
public static final java.lang.String <B>P_FUNC</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#ec.gp.push.Terminal.P_FUNC">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_FLOAT"><!-- --></A><H3>
P_FLOAT</H3>
<PRE>
public static final java.lang.String <B>P_FLOAT</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#ec.gp.push.Terminal.P_FLOAT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_INTEGER"><!-- --></A><H3>
P_INTEGER</H3>
<PRE>
public static final java.lang.String <B>P_INTEGER</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#ec.gp.push.Terminal.P_INTEGER">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_MIN"><!-- --></A><H3>
P_MIN</H3>
<PRE>
public static final java.lang.String <B>P_MIN</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#ec.gp.push.Terminal.P_MIN">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_MAX"><!-- --></A><H3>
P_MAX</H3>
<PRE>
public static final java.lang.String <B>P_MAX</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#ec.gp.push.Terminal.P_MAX">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="FLOAT_ERC"><!-- --></A><H3>
FLOAT_ERC</H3>
<PRE>
public static final int <B>FLOAT_ERC</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#ec.gp.push.Terminal.FLOAT_ERC">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="INTEGER_ERC"><!-- --></A><H3>
INTEGER_ERC</H3>
<PRE>
public static final int <B>INTEGER_ERC</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#ec.gp.push.Terminal.INTEGER_ERC">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="ERC_NAMES"><!-- --></A><H3>
ERC_NAMES</H3>
<PRE>
public static final java.lang.String[] <B>ERC_NAMES</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="minFloatERC"><!-- --></A><H3>
minFloatERC</H3>
<PRE>
public static double <B>minFloatERC</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="maxFloatERC"><!-- --></A><H3>
maxFloatERC</H3>
<PRE>
public static double <B>maxFloatERC</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="minIntegerERC"><!-- --></A><H3>
minIntegerERC</H3>
<PRE>
public static int <B>minIntegerERC</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="maxIntegerERC"><!-- --></A><H3>
maxIntegerERC</H3>
<PRE>
public static int <B>maxIntegerERC</B></PRE>
<DL>
<DL>
</DL>
</DL>
<HR>

<A NAME="instructions"><!-- --></A><H3>
instructions</H3>
<PRE>
public java.lang.String[] <B>instructions</B></PRE>
<DL>
<DD>Names of all the Push instructions I can be set to.  This includes names for custom PushInstructions.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="customInstructions"><!-- --></A><H3>
customInstructions</H3>
<PRE>
public <A HREF="../../../ec/gp/push/PushInstruction.html" title="class in ec.gp.push">PushInstruction</A>[] <B>customInstructions</B></PRE>
<DL>
<DD>A list of custom PushInstructions I can be set to.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="indices"><!-- --></A><H3>
indices</H3>
<PRE>
public int[] <B>indices</B></PRE>
<DL>
<DD>For each PushInstruction, a pointer into instructions which gives the name of that instruction. 
        Note that some instructions in instructions are built-in Push instructions and will have nothing
        pointing to them.
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="Terminal()"><!-- --></A><H3>
Terminal</H3>
<PRE>
public <B>Terminal</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="name()"><!-- --></A><H3>
name</H3>
<PRE>
public java.lang.String <B>name</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../ec/gp/ERC.html#name()">ERC</A></CODE></B></DD>
<DD>Returns the lowercase "name" of this ERC function class, some
        simple, short name which distinguishes this class from other ERC
        function classes you're using.  If you have more than one ERC function,
        you need to distinguish them here.  By default the value is "ERC",
        which works fine for a single ERC function in the function set.
        Whatever the name is, it should
        generally only have letters, numbers, or hyphens or underscores in it.
        No whitespace or other characters.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../../ec/gp/ERC.html#name()">name</A></CODE> in class <CODE><A HREF="../../../ec/gp/ERC.html" title="class in ec.gp">ERC</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="expectedChildren()"><!-- --></A><H3>
expectedChildren</H3>
<PRE>
public int <B>expectedChildren</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../ec/gp/ERC.html#expectedChildren()">ERC</A></CODE></B></DD>
<DD>Usually ERCs don't have children, and this default implementation makes certain of it. 
        But if you want to override this, you're welcome to.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../../ec/gp/ERC.html#expectedChildren()">expectedChildren</A></CODE> in class <CODE><A HREF="../../../ec/gp/ERC.html" title="class in ec.gp">ERC</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="toStringForHumans()"><!-- --></A><H3>
toStringForHumans</H3>
<PRE>
public java.lang.String <B>toStringForHumans</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../ec/gp/ERC.html#toStringForHumans()">ERC</A></CODE></B></DD>
<DD>You might want to override this to return a special human-readable version of the erc value; otherwise this defaults to toString();  This should be something that resembles a LISP atom.  If a simple number or other object won't suffice, you might use something that begins with  name() + [ + ... + ]
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../../ec/gp/ERC.html#toStringForHumans()">toStringForHumans</A></CODE> in class <CODE><A HREF="../../../ec/gp/ERC.html" title="class in ec.gp">ERC</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="defaultBase()"><!-- --></A><H3>
defaultBase</H3>
<PRE>
public <A HREF="../../../ec/util/Parameter.html" title="class in ec.util">Parameter</A> <B>defaultBase</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../ec/gp/GPNode.html#defaultBase()">GPNode</A></CODE></B></DD>
<DD>The default base for GPNodes -- defined even though
        GPNode is abstract so you don't have to in subclasses.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../ec/Prototype.html#defaultBase()">defaultBase</A></CODE> in interface <CODE><A HREF="../../../ec/Prototype.html" title="interface in ec">Prototype</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../ec/gp/GPNode.html#defaultBase()">defaultBase</A></CODE> in class <CODE><A HREF="../../../ec/gp/GPNode.html" title="class in ec.gp">GPNode</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setup(ec.EvolutionState, ec.util.Parameter)"><!-- --></A><H3>
setup</H3>
<PRE>
public void <B>setup</B>(<A HREF="../../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                  <A HREF="../../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../ec/gp/GPNode.html#setup(ec.EvolutionState, ec.util.Parameter)">GPNode</A></CODE></B></DD>
<DD>Sets up a <i>prototypical</i> GPNode with those features all nodes of that
        prototype share, and nothing more.  So no filled-in children, 
        no argposition, no parent.  Yet.

        This must be called <i>after</i> the GPTypes and GPNodeConstraints 
        have been set up.  Presently they're set up in GPInitializer,
        which gets called before this does, so we're safe. 

        You should override this if you need to load some special features on
        a per-function basis.  Note that base hangs off of a function set, so
        this method may get called for different instances in the same GPNode
        class if they're being set up as prototypes for different GPFunctionSets.

        If you absolutely need some global base, then you should use something
        hanging off of GPDefaults.base().

        The ultimate caller of this method must guarantee that he will eventually
        call state.output.exitIfErrors(), so you can freely use state.output.error
        instead of state.output.fatal(), which will help a lot.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../ec/Prototype.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></CODE> in interface <CODE><A HREF="../../../ec/Prototype.html" title="interface in ec">Prototype</A></CODE><DT><B>Specified by:</B><DD><CODE><A HREF="../../../ec/Setup.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></CODE> in interface <CODE><A HREF="../../../ec/Setup.html" title="interface in ec">Setup</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../ec/gp/GPNode.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></CODE> in class <CODE><A HREF="../../../ec/gp/GPNode.html" title="class in ec.gp">GPNode</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="nodeEquals(ec.gp.GPNode)"><!-- --></A><H3>
nodeEquals</H3>
<PRE>
public boolean <B>nodeEquals</B>(<A HREF="../../../ec/gp/GPNode.html" title="class in ec.gp">GPNode</A>&nbsp;other)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../ec/gp/ERC.html#nodeEquals(ec.gp.GPNode)">ERC</A></CODE></B></DD>
<DD>Implement this to do ERC-to-ERC comparisons.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../ec/gp/ERC.html#nodeEquals(ec.gp.GPNode)">nodeEquals</A></CODE> in class <CODE><A HREF="../../../ec/gp/ERC.html" title="class in ec.gp">ERC</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="encode()"><!-- --></A><H3>
encode</H3>
<PRE>
public java.lang.String <B>encode</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../ec/gp/ERC.html#encode()">ERC</A></CODE></B></DD>
<DD>Encodes data from the ERC, using ec.util.Code.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../ec/gp/ERC.html#encode()">encode</A></CODE> in class <CODE><A HREF="../../../ec/gp/ERC.html" title="class in ec.gp">ERC</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="decode(ec.util.DecodeReturn)"><!-- --></A><H3>
decode</H3>
<PRE>
public boolean <B>decode</B>(<A HREF="../../../ec/util/DecodeReturn.html" title="class in ec.util">DecodeReturn</A>&nbsp;dret)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../ec/gp/ERC.html#decode(ec.util.DecodeReturn)">ERC</A></CODE></B></DD>
<DD>Decodes data into the ERC from dret.  Return true if you sucessfully
        decoded, false if you didn't.  Don't increment dret.pos's value beyond
        exactly what was needed to decode your ERC.  If you fail to decode,
        you should make sure that the position and data in the dret are exactly
        as they were originally.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../../ec/gp/ERC.html#decode(ec.util.DecodeReturn)">decode</A></CODE> in class <CODE><A HREF="../../../ec/gp/ERC.html" title="class in ec.gp">ERC</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="resetNode(ec.EvolutionState, int)"><!-- --></A><H3>
resetNode</H3>
<PRE>
public void <B>resetNode</B>(<A HREF="../../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                      int&nbsp;thread)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../ec/gp/ERC.html#resetNode(ec.EvolutionState, int)">ERC</A></CODE></B></DD>
<DD>Remember to override this to randomize your ERC after it has been cloned.  The prototype will not ever receive this method call.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../ec/gp/ERC.html#resetNode(ec.EvolutionState, int)">resetNode</A></CODE> in class <CODE><A HREF="../../../ec/gp/ERC.html" title="class in ec.gp">ERC</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="eval(ec.EvolutionState, int, ec.gp.GPData, ec.gp.ADFStack, ec.gp.GPIndividual, ec.Problem)"><!-- --></A><H3>
eval</H3>
<PRE>
public void <B>eval</B>(<A HREF="../../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                 int&nbsp;thread,
                 <A HREF="../../../ec/gp/GPData.html" title="class in ec.gp">GPData</A>&nbsp;input,
                 <A HREF="../../../ec/gp/ADFStack.html" title="class in ec.gp">ADFStack</A>&nbsp;stack,
                 <A HREF="../../../ec/gp/GPIndividual.html" title="class in ec.gp">GPIndividual</A>&nbsp;individual,
                 <A HREF="../../../ec/Problem.html" title="class in ec">Problem</A>&nbsp;problem)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../../ec/gp/GPNode.html#eval(ec.EvolutionState, int, ec.gp.GPData, ec.gp.ADFStack, ec.gp.GPIndividual, ec.Problem)">GPNode</A></CODE></B></DD>
<DD>Evaluates the node with the given thread, state, individual, problem, and stack.
        Your random number generator will be state.random[thread].  
        The node should, as appropriate, evaluate child nodes with these same items
        passed to eval(...).

        <p>About <b>input</b>: <tt>input</tt> is special; it is how data is passed between
        parent and child nodes.  If children "receive" data from their parent node when
        it evaluates them, they should receive this data stored in <tt>input</tt>.
        If (more likely) the parent "receives" results from its children, it should
        pass them an <tt>input</tt> object, which they'll fill out, then it should
        check this object for the returned value.

        <p>A tree is typically evaluated by dropping a GPData into the root.  When the
        root returns, the resultant <tt>input</tt> should hold the return value.

        <p>In general, you should not be creating new GPDatas.  
        If you think about it, in most conditions (excepting ADFs and ADMs) you 
        can use and reuse <tt>input</tt> for most communications purposes between
        parents and children.  

        <p>So, let's say that your GPNode function implements the boolean AND function,
        and expects its children to return return boolean values (as it does itself).
        You've implemented your GPData subclass to be, uh, <b>BooleanData</b>, which
        looks like 

 <tt><pre>public class BooleanData extends GPData 
    {
    public boolean result;
    public GPData copyTo(GPData gpd)
      {
      ((BooleanData)gpd).result = result;
      }
    }</pre></tt>

        <p>...so, you might implement your eval(...) function as follows:

 <tt><pre>public void eval(final EvolutionState state,
                     final int thread,
                     final GPData input,
                     final ADFStack stack,
                     final GPIndividual individual,
                     final Problem problem
    {
    BooleanData dat = (BooleanData)input;
    boolean x;

    // evaluate the first child
    children[0].eval(state,thread,input,stack,individual,problem);
  
    // store away its result
    x = dat.result;

    // evaluate the second child
    children[1].eval(state,thread,input,stack,individual,problem);

    // return (in input) the result of the two ANDed

    dat.result = dat.result && x;
    return;
    }
        </pre></tt>
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../../ec/gp/GPNode.html#eval(ec.EvolutionState, int, ec.gp.GPData, ec.gp.ADFStack, ec.gp.GPIndividual, ec.Problem)">eval</A></CODE> in class <CODE><A HREF="../../../ec/gp/GPNode.html" title="class in ec.gp">GPNode</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../ec/gp/push/PushProblem.html" title="class in ec.gp.push"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?ec/gp/push/Terminal.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="Terminal.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
