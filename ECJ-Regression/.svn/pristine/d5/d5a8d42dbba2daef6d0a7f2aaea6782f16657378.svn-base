<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_41) on Fri May 03 14:32:35 EDT 2013 -->
<TITLE>
MultiObjectiveFitness
</TITLE>

<META NAME="date" CONTENT="2013-05-03">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="MultiObjectiveFitness";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../ec/multiobjective/MultiObjectiveDefaults.html" title="class in ec.multiobjective"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../ec/multiobjective/MultiObjectiveStatistics.html" title="class in ec.multiobjective"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html?ec/multiobjective/MultiObjectiveFitness.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="MultiObjectiveFitness.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
ec.multiobjective</FONT>
<BR>
Class MultiObjectiveFitness</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../resources/inherit.gif" ALT="extended by "><A HREF="../../ec/Fitness.html" title="class in ec">ec.Fitness</A>
      <IMG SRC="../../resources/inherit.gif" ALT="extended by "><B>ec.multiobjective.MultiObjectiveFitness</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../ec/Prototype.html" title="interface in ec">Prototype</A>, <A HREF="../../ec/Setup.html" title="interface in ec">Setup</A>, java.io.Serializable, java.lang.Cloneable, java.lang.Comparable</DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../ec/multiobjective/nsga2/NSGA2MultiObjectiveFitness.html" title="class in ec.multiobjective.nsga2">NSGA2MultiObjectiveFitness</A>, <A HREF="../../ec/multiobjective/spea2/SPEA2MultiObjectiveFitness.html" title="class in ec.multiobjective.spea2">SPEA2MultiObjectiveFitness</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>MultiObjectiveFitness</B><DT>extends <A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></DL>
</PRE>

<P>
MultiObjectiveFitness is a subclass of Fitness which implements basic
 multi-objective mechanisms suitable for being used with a variety of
 multi-objective selection mechanisms, including ones using pareto-optimality.
 
 <p>
 The object contains two items: an array of floating point values representing
 the various multiple fitnesses, and a flag (maximize) indicating whether
 higher is considered better. By default, isIdealFitness() always returns
 false; you might want to override that, though it'd be unusual -- what is the
 ideal fitness from the perspective of a pareto front?
 
 <p>
 The object also contains maximum and minimum fitness values suggested for the
 problem, on a per-objective basis. By default the maximum values are all 1.0
 and the minimum values are all 0.0, but you can change these. Note that
 maximum does not mean "best" unless maximize is true.

 <p>The class also contains utility methods or computing pareto dominance, 
 Pareto Fronts and Pareto Front Ranks, and distance in multiobjective space.
 The default comparison operators use Pareto Dominance, though this is often
 overridden by subclasses.

 <p>The fitness() method returns the maximum of the fitness values, which is
 clearly nonsensical: you should not be using this method.
 
 <p>Subclasses of this class may add certain auxiliary fitness measures which
 are printed out by MultiObjectiveStatistics along with the multiple objectives.
 To have these values printed out, override the getAuxiliaryFitnessNames()
 and getAuxiliaryFitnessValues() methods.

 <p>
 <b>Parameters</b><br>
 <table>
 <tr>
 <td valign=top><i>base</i>.<tt>num-objectives</tt><br>
 (else)<tt>multi.num-objectives</tt><br>
 <font size=-1>int &gt;= 1</font></td>
 <td valign=top>(the number of fitnesses in the objectives array)</td>
 </tr>
 
 <tr>
 <td valign=top><i>base</i>.<tt>maximize</tt><br>
 <font size=-1> bool = <tt>true</tt> (default) or <tt>false</tt></font></td>
 <td valign=top>(are higher values considered "better"?)
 </table>
 
 <tr>
 <td valign=top><i>base</i>.<tt>maximize</tt>.<i>i</i<br>
 <font size=-1> bool = <tt>true</tt> (default) or <tt>false</tt></font></td>
 <td valign=top>(are higher values considered "better"?).  Overrides the
 all-objecgive maximization setting.
 </table>
 
 <tr>
 <td valign=top><i>base</i>.<tt>max</tt><br>
 <font size=-1> float (<tt>1.0</tt> default)</font></td>
 <td valign=top>(maximum fitness value for all objectives)</table>
 
 <tr>
 <td valign=top><i>base</i>.<tt>max</tt>.<i>i</i><br>
 <font size=-1> float (<tt>1.0</tt> default)</font></td>
 <td valign=top>(maximum fitness value for objective <i>i</i>. Overrides the
 all-objective maximum fitness.)</table>
 
 <tr>
 <td valign=top><i>base</i>.<tt>min</tt><br>
 <font size=-1> float (<tt>0.0</tt> (default)</font></td>
 <td valign=top>(minimum fitness value for all objectives)</table>
 
 <tr>
 <td valign=top><i>base</i>.<tt>min</tt>.<i>i</i><br>
 <font size=-1> float = <tt>0.0</tt> (default)</font></td>
 <td valign=top>(minimum fitness value for objective <i>i</i>. Overrides the
 all-objective minimum fitness.)</table>
 
 <p>
 <b>Default Base</b><br>
 multi.fitness
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../serialized-form.html#ec.multiobjective.MultiObjectiveFitness">Serialized Form</A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#FITNESS_POSTAMBLE">FITNESS_POSTAMBLE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#maximize">maximize</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Maximization.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#maxObjective">maxObjective</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Desired maximum fitness values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#minObjective">minObjective</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Desired minimum fitness values.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#MULTI_FITNESS_POSTAMBLE">MULTI_FITNESS_POSTAMBLE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;float[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#objectives">objectives</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The various fitnesses.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#P_MAXIMIZE">P_MAXIMIZE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Is higher better?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#P_MAXOBJECTIVES">P_MAXOBJECTIVES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameter for max fitness values</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#P_MINOBJECTIVES">P_MINOBJECTIVES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameter for min fitness values</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#P_NUMOBJECTIVES">P_NUMOBJECTIVES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameter for size of objectives</TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_ec.Fitness"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from class ec.<A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../ec/Fitness.html#context">context</A>, <A HREF="../../ec/Fitness.html#FITNESS_PREAMBLE">FITNESS_PREAMBLE</A>, <A HREF="../../ec/Fitness.html#P_FITNESS">P_FITNESS</A>, <A HREF="../../ec/Fitness.html#trials">trials</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#MultiObjectiveFitness()">MultiObjectiveFitness</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#betterThan(ec.Fitness)">betterThan</A></B>(<A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A>&nbsp;fitness)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if I'm better than _fitness.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.Object</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#clone()">clone</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new individual cloned from a prototype,
        and suitable to begin use in its own evolutionary
        context.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#defaultBase()">defaultBase</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the default base for this prototype.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#equivalentTo(ec.Fitness)">equivalentTo</A></B>(<A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A>&nbsp;_fitness)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if I'm equivalent in fitness (neither better nor worse) to
 _fitness.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#fitness()">fitness</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the Max() of objectives, which adheres to Fitness.java's protocol
 for this method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#fitnessToString()">fitnessToString</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Print to a string the fitness in a fashion intended
        to be parsed in again via readFitness(...).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#fitnessToStringForHumans()">fitnessToStringForHumans</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Print to a string the fitness in a fashion readable by humans, and not intended
        to be parsed in again.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#getAuxilliaryFitnessNames()">getAuxilliaryFitnessNames</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns auxilliary fitness value names to be printed by the statistics object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#getAuxilliaryFitnessValues()">getAuxilliaryFitnessValues</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns auxilliary fitness values to be printed by the statistics object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#getNumObjectives()">getNumObjectives</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#getObjective(int)">getObjective</A></B>(int&nbsp;i)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#getObjectives()">getObjectives</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the objectives as an array.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#getRankings(ec.Individual[])">getRankings</A></B>(<A HREF="../../ec/Individual.html" title="class in ec">Individual</A>[]&nbsp;inds)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the Pareto rank for each individual.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#isIdealFitness()">isIdealFitness</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if this fitness is the "ideal" fitness.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#isMaximizing()">isMaximizing</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>Deprecated.</B>&nbsp;<I>Use isMaximizing(objective).  This function now just returns whether the first objective is maximizing.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#isMaximizing(int)">isMaximizing</A></B>(int&nbsp;objective)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#manhattanObjectiveDistance(ec.multiobjective.MultiObjectiveFitness)">manhattanObjectiveDistance</A></B>(<A HREF="../../ec/multiobjective/MultiObjectiveFitness.html" title="class in ec.multiobjective">MultiObjectiveFitness</A>&nbsp;other)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the Manhattan difference between two Fitnesses in Objective space.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#paretoDominates(ec.multiobjective.MultiObjectiveFitness)">paretoDominates</A></B>(<A HREF="../../ec/multiobjective/MultiObjectiveFitness.html" title="class in ec.multiobjective">MultiObjectiveFitness</A>&nbsp;other)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if I'm better than _fitness.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.ArrayList</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#partitionIntoParetoFront(ec.Individual[], java.util.ArrayList, java.util.ArrayList)">partitionIntoParetoFront</A></B>(<A HREF="../../ec/Individual.html" title="class in ec">Individual</A>[]&nbsp;inds,
                         java.util.ArrayList&nbsp;front,
                         java.util.ArrayList&nbsp;nonFront)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Divides an array of Individuals into the Pareto front and the "nonFront" (everyone else).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.ArrayList</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#partitionIntoRanks(ec.Individual[])">partitionIntoRanks</A></B>(<A HREF="../../ec/Individual.html" title="class in ec">Individual</A>[]&nbsp;inds)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Divides inds into pareto front ranks (each an ArrayList), and returns them, in order,
        stored in an ArrayList.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#readFitness(ec.EvolutionState, java.io.DataInput)">readFitness</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
            java.io.DataInput&nbsp;dataInput)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reads the binary form of an individual from a DataInput.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#readFitness(ec.EvolutionState, java.io.LineNumberReader)">readFitness</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
            java.io.LineNumberReader&nbsp;reader)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reads in the fitness from a form outputted by fitnessToString() and thus
        printFitnessForHumans(...).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#setObjectives(ec.EvolutionState, float[])">setObjectives</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
              float[]&nbsp;newObjectives)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
      <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets up.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#sumSquaredObjectiveDistance(ec.multiobjective.MultiObjectiveFitness)">sumSquaredObjectiveDistance</A></B>(<A HREF="../../ec/multiobjective/MultiObjectiveFitness.html" title="class in ec.multiobjective">MultiObjectiveFitness</A>&nbsp;other)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the sum of the squared difference between two Fitnesses in Objective space.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/multiobjective/MultiObjectiveFitness.html#writeFitness(ec.EvolutionState, java.io.DataOutput)">writeFitness</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
             java.io.DataOutput&nbsp;dataOutput)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes the binary form of an individual out to a DataOutput.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_ec.Fitness"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class ec.<A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../ec/Fitness.html#compareTo(java.lang.Object)">compareTo</A>, <A HREF="../../ec/Fitness.html#contextIsBetterThan(ec.Fitness)">contextIsBetterThan</A>, <A HREF="../../ec/Fitness.html#getContext()">getContext</A>, <A HREF="../../ec/Fitness.html#merge(ec.EvolutionState, ec.Fitness)">merge</A>, <A HREF="../../ec/Fitness.html#printFitness(ec.EvolutionState, int)">printFitness</A>, <A HREF="../../ec/Fitness.html#printFitness(ec.EvolutionState, int, int)">printFitness</A>, <A HREF="../../ec/Fitness.html#printFitness(ec.EvolutionState, java.io.PrintWriter)">printFitness</A>, <A HREF="../../ec/Fitness.html#printFitnessForHumans(ec.EvolutionState, int)">printFitnessForHumans</A>, <A HREF="../../ec/Fitness.html#printFitnessForHumans(ec.EvolutionState, int, int)">printFitnessForHumans</A>, <A HREF="../../ec/Fitness.html#readTrials(ec.EvolutionState, java.io.DataInput)">readTrials</A>, <A HREF="../../ec/Fitness.html#setContext(ec.Individual[])">setContext</A>, <A HREF="../../ec/Fitness.html#setContext(ec.Individual[], int)">setContext</A>, <A HREF="../../ec/Fitness.html#setToBestOf(ec.EvolutionState, ec.Fitness[])">setToBestOf</A>, <A HREF="../../ec/Fitness.html#setToMeanOf(ec.EvolutionState, ec.Fitness[])">setToMeanOf</A>, <A HREF="../../ec/Fitness.html#setToMedianOf(ec.EvolutionState, ec.Fitness[])">setToMedianOf</A>, <A HREF="../../ec/Fitness.html#writeTrials(ec.EvolutionState, java.io.DataOutput)">writeTrials</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="MULTI_FITNESS_POSTAMBLE"><!-- --></A><H3>
MULTI_FITNESS_POSTAMBLE</H3>
<PRE>
public static final java.lang.String <B>MULTI_FITNESS_POSTAMBLE</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.multiobjective.MultiObjectiveFitness.MULTI_FITNESS_POSTAMBLE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="FITNESS_POSTAMBLE"><!-- --></A><H3>
FITNESS_POSTAMBLE</H3>
<PRE>
public static final java.lang.String <B>FITNESS_POSTAMBLE</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.multiobjective.MultiObjectiveFitness.FITNESS_POSTAMBLE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_NUMOBJECTIVES"><!-- --></A><H3>
P_NUMOBJECTIVES</H3>
<PRE>
public static final java.lang.String <B>P_NUMOBJECTIVES</B></PRE>
<DL>
<DD>parameter for size of objectives
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.multiobjective.MultiObjectiveFitness.P_NUMOBJECTIVES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_MAXOBJECTIVES"><!-- --></A><H3>
P_MAXOBJECTIVES</H3>
<PRE>
public static final java.lang.String <B>P_MAXOBJECTIVES</B></PRE>
<DL>
<DD>parameter for max fitness values
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.multiobjective.MultiObjectiveFitness.P_MAXOBJECTIVES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_MINOBJECTIVES"><!-- --></A><H3>
P_MINOBJECTIVES</H3>
<PRE>
public static final java.lang.String <B>P_MINOBJECTIVES</B></PRE>
<DL>
<DD>parameter for min fitness values
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.multiobjective.MultiObjectiveFitness.P_MINOBJECTIVES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_MAXIMIZE"><!-- --></A><H3>
P_MAXIMIZE</H3>
<PRE>
public static final java.lang.String <B>P_MAXIMIZE</B></PRE>
<DL>
<DD>Is higher better?
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.multiobjective.MultiObjectiveFitness.P_MAXIMIZE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="maxObjective"><!-- --></A><H3>
maxObjective</H3>
<PRE>
public float[] <B>maxObjective</B></PRE>
<DL>
<DD>Desired maximum fitness values. By default these are 1.0. Shared.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="minObjective"><!-- --></A><H3>
minObjective</H3>
<PRE>
public float[] <B>minObjective</B></PRE>
<DL>
<DD>Desired minimum fitness values. By default these are 0.0. Shared.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="maximize"><!-- --></A><H3>
maximize</H3>
<PRE>
public boolean[] <B>maximize</B></PRE>
<DL>
<DD>Maximization.  Shared.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="objectives"><!-- --></A><H3>
objectives</H3>
<PRE>
protected float[] <B>objectives</B></PRE>
<DL>
<DD>The various fitnesses.
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="MultiObjectiveFitness()"><!-- --></A><H3>
MultiObjectiveFitness</H3>
<PRE>
public <B>MultiObjectiveFitness</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="getAuxilliaryFitnessNames()"><!-- --></A><H3>
getAuxilliaryFitnessNames</H3>
<PRE>
public java.lang.String[] <B>getAuxilliaryFitnessNames</B>()</PRE>
<DL>
<DD>Returns auxilliary fitness value names to be printed by the statistics object.
        By default, an empty array is returned, but various algorithms may override this to provide additional columns.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getAuxilliaryFitnessValues()"><!-- --></A><H3>
getAuxilliaryFitnessValues</H3>
<PRE>
public double[] <B>getAuxilliaryFitnessValues</B>()</PRE>
<DL>
<DD>Returns auxilliary fitness values to be printed by the statistics object.
        By default, an empty array is returned, but various algorithms may override this to provide additional columns.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isMaximizing()"><!-- --></A><H3>
isMaximizing</H3>
<PRE>
public boolean <B>isMaximizing</B>()</PRE>
<DL>
<DD><B>Deprecated.</B>&nbsp;<I>Use isMaximizing(objective).  This function now just returns whether the first objective is maximizing.</I>
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isMaximizing(int)"><!-- --></A><H3>
isMaximizing</H3>
<PRE>
public boolean <B>isMaximizing</B>(int&nbsp;objective)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getNumObjectives()"><!-- --></A><H3>
getNumObjectives</H3>
<PRE>
public int <B>getNumObjectives</B>()</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getObjectives()"><!-- --></A><H3>
getObjectives</H3>
<PRE>
public float[] <B>getObjectives</B>()</PRE>
<DL>
<DD>Returns the objectives as an array. Note that this is the *actual array*.
 Though you could set values in this array, you should NOT do this --
 rather, set them using setObjectives().
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getObjective(int)"><!-- --></A><H3>
getObjective</H3>
<PRE>
public float <B>getObjective</B>(int&nbsp;i)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setObjectives(ec.EvolutionState, float[])"><!-- --></A><H3>
setObjectives</H3>
<PRE>
public void <B>setObjectives</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                          float[]&nbsp;newObjectives)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="defaultBase()"><!-- --></A><H3>
defaultBase</H3>
<PRE>
public <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A> <B>defaultBase</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../ec/Prototype.html#defaultBase()">Prototype</A></CODE></B></DD>
<DD>Returns the default base for this prototype.
        This should generally be implemented by building off of the static base()
        method on the DefaultsForm object for the prototype's package. This should
        be callable during setup(...).
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="clone()"><!-- --></A><H3>
clone</H3>
<PRE>
public java.lang.Object <B>clone</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../ec/Prototype.html#clone()">Prototype</A></CODE></B></DD>
<DD>Creates a new individual cloned from a prototype,
        and suitable to begin use in its own evolutionary
        context.

        <p>Typically this should be a full "deep" clone.
        However, you may share certain elements with other objects
        rather than clone hem, depending on the situation:

        <p>
        <ul>
        <li>If you hold objects which are shared with other instances,
        don't clone them.
        <li>If you hold objects which must be unique, clone them.
        <li>If you hold objects which were given to you as a gesture
        of kindness, and aren't owned by you, you probably shouldn't clone
        them.
        <li> DON'T attempt to clone: Singletons, Cliques, or Groups.
        <li>Arrays are not cloned automatically; you may need to
        clone an array if you're not sharing it with other instances.
        Arrays have the nice feature of being copyable by calling clone()
        on them.
        </ul>

        <p><b>Implementations.</b>

        <ul>
        <li>If no ancestor of yours implements clone(),
        and you have no need to do clone deeply,
        and you are abstract, then you should not declare clone().

        <li>If no ancestor of yours implements clone(),
        and you have no need to do clone deeply,
        and you are <b>not</b> abstract, then you should implement
        it as follows:

        <p>
        <tt><pre>
 public Object clone() 
     {
     try
         { 
         return super.clone();
         }
     catch ((CloneNotSupportedException e)
         { throw new InternalError(); } // never happens
     }
        </pre></tt>

        <li>If no ancestor of yours implements clone(), but you
        need to deep-clone some things, then you should implement it
        as follows:

        <p>
        <tt><pre>
 public Object clone() 
     {
     try
         { 
         MyObject myobj = (MyObject) (super.clone());

         // put your deep-cloning code here...
         }
     catch ((CloneNotSupportedException e)
         { throw new InternalError(); } // never happens
     return myobj;
     } 
        </pre></tt>

        <li>If an ancestor has implemented clone(), and you also need
        to deep clone some things, then you should implement it as follows:

        <p>
        <tt><pre>
 public Object clone() 
     { 
     MyObject myobj = (MyObject) (super.clone());

     // put your deep-cloning code here...

     return myobj;
     } 
        </pre></tt>
        </ul>
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../ec/Prototype.html#clone()">clone</A></CODE> in interface <CODE><A HREF="../../ec/Prototype.html" title="interface in ec">Prototype</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../ec/Fitness.html#clone()">clone</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="fitness()"><!-- --></A><H3>
fitness</H3>
<PRE>
public float <B>fitness</B>()</PRE>
<DL>
<DD>Returns the Max() of objectives, which adheres to Fitness.java's protocol
 for this method. Though you should not rely on a selection or statistics
 method which requires this.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../ec/Fitness.html#fitness()">fitness</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setup(ec.EvolutionState, ec.util.Parameter)"><!-- --></A><H3>
setup</H3>
<PRE>
public void <B>setup</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                  <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base)</PRE>
<DL>
<DD>Sets up. This must be called at least once in the prototype before
 instantiating any fitnesses that will actually be used in evolution.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../ec/Prototype.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></CODE> in interface <CODE><A HREF="../../ec/Prototype.html" title="interface in ec">Prototype</A></CODE><DT><B>Specified by:</B><DD><CODE><A HREF="../../ec/Setup.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></CODE> in interface <CODE><A HREF="../../ec/Setup.html" title="interface in ec">Setup</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../ec/Fitness.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="isIdealFitness()"><!-- --></A><H3>
isIdealFitness</H3>
<PRE>
public boolean <B>isIdealFitness</B>()</PRE>
<DL>
<DD>Returns true if this fitness is the "ideal" fitness. Default always
 returns false. You may want to override this.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../ec/Fitness.html#isIdealFitness()">isIdealFitness</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="equivalentTo(ec.Fitness)"><!-- --></A><H3>
equivalentTo</H3>
<PRE>
public boolean <B>equivalentTo</B>(<A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A>&nbsp;_fitness)</PRE>
<DL>
<DD>Returns true if I'm equivalent in fitness (neither better nor worse) to
 _fitness. The rule I'm using is this: If one of us is better in one or
 more criteria, and we are equal in the others, then equivalentTo is
 false. If each of us is better in one or more criteria each, or we are
 equal in all criteria, then equivalentTo is true.   Multiobjective optimization algorithms may
 choose to override this to do something else.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../ec/Fitness.html#equivalentTo(ec.Fitness)">equivalentTo</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="betterThan(ec.Fitness)"><!-- --></A><H3>
betterThan</H3>
<PRE>
public boolean <B>betterThan</B>(<A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A>&nbsp;fitness)</PRE>
<DL>
<DD>Returns true if I'm better than _fitness. The DEFAULT rule I'm using is this: if
 I am better in one or more criteria, and we are equal in the others, then
 betterThan is true, else it is false. Multiobjective optimization algorithms may
 choose to override this to do something else.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../ec/Fitness.html#betterThan(ec.Fitness)">betterThan</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="paretoDominates(ec.multiobjective.MultiObjectiveFitness)"><!-- --></A><H3>
paretoDominates</H3>
<PRE>
public boolean <B>paretoDominates</B>(<A HREF="../../ec/multiobjective/MultiObjectiveFitness.html" title="class in ec.multiobjective">MultiObjectiveFitness</A>&nbsp;other)</PRE>
<DL>
<DD>Returns true if I'm better than _fitness. The rule I'm using is this: if
 I am better in one or more criteria, and we are equal in the others, then
 betterThan is true, else it is false.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="partitionIntoParetoFront(ec.Individual[], java.util.ArrayList, java.util.ArrayList)"><!-- --></A><H3>
partitionIntoParetoFront</H3>
<PRE>
public static java.util.ArrayList <B>partitionIntoParetoFront</B>(<A HREF="../../ec/Individual.html" title="class in ec">Individual</A>[]&nbsp;inds,
                                                           java.util.ArrayList&nbsp;front,
                                                           java.util.ArrayList&nbsp;nonFront)</PRE>
<DL>
<DD>Divides an array of Individuals into the Pareto front and the "nonFront" (everyone else). 
 The Pareto front is returned.  You may provide ArrayLists for the front and a nonFront.
 If you provide null for the front, an ArrayList will be created for you.  If you provide
 null for the nonFront, non-front individuals will not be added to it.  This algorithm is
 O(n^2).
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="partitionIntoRanks(ec.Individual[])"><!-- --></A><H3>
partitionIntoRanks</H3>
<PRE>
public static java.util.ArrayList <B>partitionIntoRanks</B>(<A HREF="../../ec/Individual.html" title="class in ec">Individual</A>[]&nbsp;inds)</PRE>
<DL>
<DD>Divides inds into pareto front ranks (each an ArrayList), and returns them, in order,
        stored in an ArrayList.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="getRankings(ec.Individual[])"><!-- --></A><H3>
getRankings</H3>
<PRE>
public static int[] <B>getRankings</B>(<A HREF="../../ec/Individual.html" title="class in ec">Individual</A>[]&nbsp;inds)</PRE>
<DL>
<DD>Returns the Pareto rank for each individual.  Rank 0 is the best rank, then rank 1, and so on.  This is O(n) but it has a high constant overhead because it
        allocates a hashmap and does some autoboxing.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="sumSquaredObjectiveDistance(ec.multiobjective.MultiObjectiveFitness)"><!-- --></A><H3>
sumSquaredObjectiveDistance</H3>
<PRE>
public double <B>sumSquaredObjectiveDistance</B>(<A HREF="../../ec/multiobjective/MultiObjectiveFitness.html" title="class in ec.multiobjective">MultiObjectiveFitness</A>&nbsp;other)</PRE>
<DL>
<DD>Returns the sum of the squared difference between two Fitnesses in Objective space.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="manhattanObjectiveDistance(ec.multiobjective.MultiObjectiveFitness)"><!-- --></A><H3>
manhattanObjectiveDistance</H3>
<PRE>
public double <B>manhattanObjectiveDistance</B>(<A HREF="../../ec/multiobjective/MultiObjectiveFitness.html" title="class in ec.multiobjective">MultiObjectiveFitness</A>&nbsp;other)</PRE>
<DL>
<DD>Returns the Manhattan difference between two Fitnesses in Objective space.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="fitnessToString()"><!-- --></A><H3>
fitnessToString</H3>
<PRE>
public java.lang.String <B>fitnessToString</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../ec/Fitness.html#fitnessToString()">Fitness</A></CODE></B></DD>
<DD>Print to a string the fitness in a fashion intended
        to be parsed in again via readFitness(...).
        The fitness and evaluated flag should not be included.  The default form
        simply calls toString(), which is almost certainly wrong, 
        and you'll probably want to override this to something else.  When overriding, you
        may wish to check to see if the 'trials' variable is non-null, and issue an error if so.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../ec/Fitness.html#fitnessToString()">fitnessToString</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="fitnessToStringForHumans()"><!-- --></A><H3>
fitnessToStringForHumans</H3>
<PRE>
public java.lang.String <B>fitnessToStringForHumans</B>()</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../ec/Fitness.html#fitnessToStringForHumans()">Fitness</A></CODE></B></DD>
<DD>Print to a string the fitness in a fashion readable by humans, and not intended
        to be parsed in again.  The default form
        simply calls toString(), but you'll probably want to override this to something else.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../ec/Fitness.html#fitnessToStringForHumans()">fitnessToStringForHumans</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="readFitness(ec.EvolutionState, java.io.LineNumberReader)"><!-- --></A><H3>
readFitness</H3>
<PRE>
public void <B>readFitness</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                        java.io.LineNumberReader&nbsp;reader)
                 throws java.io.IOException</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../ec/Fitness.html#readFitness(ec.EvolutionState, java.io.LineNumberReader)">Fitness</A></CODE></B></DD>
<DD>Reads in the fitness from a form outputted by fitnessToString() and thus
        printFitnessForHumans(...).  The default version of this method
        exits the program with an "unimplemented" error.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../ec/Fitness.html#readFitness(ec.EvolutionState, java.io.LineNumberReader)">readFitness</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="writeFitness(ec.EvolutionState, java.io.DataOutput)"><!-- --></A><H3>
writeFitness</H3>
<PRE>
public void <B>writeFitness</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                         java.io.DataOutput&nbsp;dataOutput)
                  throws java.io.IOException</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../ec/Fitness.html#writeFitness(ec.EvolutionState, java.io.DataOutput)">Fitness</A></CODE></B></DD>
<DD>Writes the binary form of an individual out to a DataOutput.  This is not for serialization:
        the object should only write out the data relevant to the object sufficient to rebuild it from a DataInput.
        The default version exits the program with an "unimplemented" error; you should override this, and be
        certain to also write the 'trials' variable as well.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../ec/Fitness.html#writeFitness(ec.EvolutionState, java.io.DataOutput)">writeFitness</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<HR>

<A NAME="readFitness(ec.EvolutionState, java.io.DataInput)"><!-- --></A><H3>
readFitness</H3>
<PRE>
public void <B>readFitness</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                        java.io.DataInput&nbsp;dataInput)
                 throws java.io.IOException</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../ec/Fitness.html#readFitness(ec.EvolutionState, java.io.DataInput)">Fitness</A></CODE></B></DD>
<DD>Reads the binary form of an individual from a DataInput.  This is not for serialization:
        the object should only read in the data written out via printIndividual(state,dataInput).  
        The default version exits the program with an "unimplemented" error; you should override this, and be
        certain to also write the 'trials' variable as well.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../ec/Fitness.html#readFitness(ec.EvolutionState, java.io.DataInput)">readFitness</A></CODE> in class <CODE><A HREF="../../ec/Fitness.html" title="class in ec">Fitness</A></CODE></DL>
</DD>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../ec/multiobjective/MultiObjectiveDefaults.html" title="class in ec.multiobjective"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../ec/multiobjective/MultiObjectiveStatistics.html" title="class in ec.multiobjective"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html?ec/multiobjective/MultiObjectiveFitness.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="MultiObjectiveFitness.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
