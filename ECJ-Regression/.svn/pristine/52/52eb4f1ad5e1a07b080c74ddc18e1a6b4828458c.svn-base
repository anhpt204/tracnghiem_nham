<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_41) on Fri May 03 14:32:37 EDT 2013 -->
<TITLE>
VectorSpecies
</TITLE>

<META NAME="date" CONTENT="2013-05-03">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="VectorSpecies";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../ec/vector/VectorIndividual.html" title="class in ec.vector"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html?ec/vector/VectorSpecies.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="VectorSpecies.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
ec.vector</FONT>
<BR>
Class VectorSpecies</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../resources/inherit.gif" ALT="extended by "><A HREF="../../ec/Species.html" title="class in ec">ec.Species</A>
      <IMG SRC="../../resources/inherit.gif" ALT="extended by "><B>ec.vector.VectorSpecies</B>
</PRE>
<DL>
<DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../ec/Prototype.html" title="interface in ec">Prototype</A>, <A HREF="../../ec/Setup.html" title="interface in ec">Setup</A>, java.io.Serializable, java.lang.Cloneable</DD>
</DL>
<DL>
<DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../ec/vector/BitVectorSpecies.html" title="class in ec.vector">BitVectorSpecies</A>, <A HREF="../../ec/vector/FloatVectorSpecies.html" title="class in ec.vector">FloatVectorSpecies</A>, <A HREF="../../ec/vector/GeneVectorSpecies.html" title="class in ec.vector">GeneVectorSpecies</A>, <A HREF="../../ec/vector/IntegerVectorSpecies.html" title="class in ec.vector">IntegerVectorSpecies</A></DD>
</DL>
<HR>
<DL>
<DT><PRE>public class <B>VectorSpecies</B><DT>extends <A HREF="../../ec/Species.html" title="class in ec">Species</A></DL>
</PRE>

<P>
VectorSpecies is a species which can create VectorIndividuals.  Different
 VectorSpecies are used for different kinds of VectorIndividuals: a plain
 VectorSpecies is probably only applicable for BitVectorIndividuals.
 
 <p>VectorSpecies supports the following recombination methods:</p>
 <ul>
 <li><b>One-point crossover</b>.</li>
 <li><b>Two-point crossover</b>.</li>
 <li><b>Uniform crossover</b> - inaccurately called "any-point".</li>
 <li><b>Line recombination</b> - children are random points on a line between
      the two parents.</li>
 <li><b>Intermediate recombination</b> - the value of each component of the
      vector is between the values of that component of the parent vectors.
      </li>
 </ul>
 
 <P>Note that BitVectorIndividuals (which use VectorSpecies) and GeneVectorIndividuals
 (which use GeneVectorSpecies, a subclass of VectorSpecies) do not support
 Line or Intermediate Recombination.

 <p>Also note that for LongVectorIndividuals, there are certain values that will
 never be created by line and intermediate recombination, because the
 recombination is calculated using doubles and then rounded to the nearest
 long. For large enough values (but still smaller than the maximum long), the
 difference between one double and the next is greater than one.</p>

 <p>VectorSpecies has three wasy to determine the initial size of the individual:</p>
 <ul>
 <li><b>A fixed size</b>.</li>
 <li><b>Geometric distribution</b>.</li>
 <li><b>Uniform distribution</b></li>
 </ul>

 <p>If the algorithm used is the geometric distribution, the VectorSpecies starts at a
 minimum size and continues flipping a coin with a certain "resize probability",
 increasing the size each time, until the coin comes up tails (fails).  The chunk size
 must be 1 in this case.

 <p> If the algorithm used is the uniform distribution, the VectorSpecies picks a random
 size between a provided minimum and maximum size, inclusive.  The chunk size
 must be 1 in this case.

 <p>If the size is fixed, then you can also provide a "chunk size" which constrains the
 locations in which crossover can be performed (only along chunk boundaries).  The genome
 size must be a multiple of the chunk size in this case.

 <p>VectorSpecies also contains a number of parameters guiding how the individual
 crosses over and mutates.

 <p><b>Per-Gene and Per-Segment Specification.</b>  VectorSpecies and its subclasses
 specify a lot of parameters, notably mutation and initialization parameters, in one
 of three ways.  We will use the <b><tt>mutation-probability</tt></b>
 parameter as an example.

 <ol>
 <li> Globally for all genes in the genome.
      This is done by specifying:
      <p><i>base</i>.<tt>mutation-probability</tt>
      <br><i>base</i>.<tt>max-gene</tt>
      <p><i>Note:</i> you <b>must</b> provide these values even if you don't use them,
      as they're used as defaults by #2 and #3 below.
<p>
 <li> You may provide parameters for genes in segments (regions) along
      the genome.  The idea is to allow you to specify large chunks of genes
      all having the same parameter features.  
      To do this you must first specify how many segments there are:
      <p><i>base</i>.<tt>num-segments</tt>
      <p>The segments then may be defined by either start or end indices of genes. 
      This is controlled by specifying the value of:
      <p><i>base</i>.<tt>segment-type</tt>
      <p>...which can assume the value of start or end, with start being the default.
      The indices are defined using Java array style, i.e. the first gene has the index of 0, 
      and the last gene has the index of genome-size - 1.
      <p>Using this method, each segment is specified by<i>j</i>...
      <p><i>base</i>.<tt>segment.</tt><i>j</i><tt>.start</tt>
      <br><i>base</i>.<tt>segment.</tt><i>j</i><tt>.mutation-probability</tt>
      if segment-type value was chosen as start or by:
      <p><i>base</i>.<tt>segment.</tt><i>j</i><tt>.end</tt>
      <br><i>base</i>.<tt>segment.</tt><i>j</i><tt>.mutation-probability</tt>
      if segment-type value is equal to end.
<p>
 <li> You may parameters for each separate gene.  
      This is done by specifying (for each gene location <i>i</i> you wish to specify)
      <p><i>base</i>.<tt>mutation-probability</tt>.<i>i</i>
 </ol>
 
 <p>Any settings for #3 override #2, and both override #1. 

 <p>The only parameter which can be specified this way in VectorSpecies is at present
 <tt>mutation-probability</tt>.  However a number of parameters are specified this way
 in subclasses. 

 <p><b>Parameters</b><br>
 <table>
 <tr><td valign=top><i>base</i>.<tt>genome-size</tt><br>
 <font size=-1>int &gt;= 1 or one of: geometric, uniform</font></td>
 <td valign=top>(size of the genome, or if 'geometric' or 'uniform', the algorithm used to size the initial genome)</td></tr>

 <tr><td valign=top><i>base</i>.<tt>chunk-size</tt><br>
 <font size=-1>1 &lt;= int &lt;= genome-size (default=1)</font></td>
 <td valign=top>(the chunk size for crossover (crossover will only occur on chunk boundaries))</td></tr>

 <tr><td valign=top><i>base</i>.<tt>geometric-prob</tt><br>
 <font size=-1>0.0 &lt;= float &lt; 1.0</font></td>
 <td valign=top>(the coin-flip probability for increasing the initial size using the geometric distribution)</td></tr>

 <tr><td valign=top><i>base</i>.<tt>min-initial-size</tt><br>
 <font size=-1>int &gt;= 0</font></td>
 <td valign=top>(the minimum initial size of the genome)</td></tr>

 <tr><td valign=top><i>base</i>.<tt>max-initial-size</tt><br>
 <font size=-1>int &gt;= min-initial-size</font></td>
 <td valign=top>(the maximum initial size of the genome)</td></tr>

 <tr><td valign=top><i>base</i>.<tt>crossover-type</tt><br>
 <font size=-1>string, one of: one, two, any</font></td>
 <td valign=top>(default crossover type (one-point, two-point, any-point (uniform), line, or intermediate)</td></tr>

 <tr><td valign=top><i>base</i>.<tt>crossover-prob</tt><br>
 <font size=-1>0.0 &gt;= float &gt;= 1.0 </font></td>
 <td valign=top>(probability that a gene will get crossed over during any-point or simulated binary crossover)</td></tr>

 <tr><td valign=top><i>base</i>.<tt>line-extension</tt><br>
 <font size=-1>float &gt;= 0.0 </font></td>
 <td valign=top>(for line and intermediate recombination, how far along the line or outside of the hypercube children can be. If this value is zero, all children must be within the hypercube.)


 <tr><td>&nbsp;
 <tr><td valign=top style="white-space: nowrap"><i>base</i>.<tt>mutation-prob</tt>&nbsp;&nbsp;&nbsp;<i>or</i><br>
 <tr><td valign=top style="white-space: nowrap"><i>base</i>.<tt>segment</tt>.<i>segment-number</i>.<tt>mutation-prob</tt>&nbsp;&nbsp;&nbsp;<i>or</i><br>
 <tr><td valign=top style="white-space: nowrap"><i>base</i>.<tt>mutation-prob</tt>.<i>gene-number</i><br>
 <font size=-1>0.0 &lt;= float &lt;= 1.0 </font></td>
 <td valign=top>(probability that a gene will get mutated over default mutation)</td></tr>

 </table>

 <p><b>Default Base</b><br>
 vector.species
<P>

<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../serialized-form.html#ec.vector.VectorSpecies">Serialized Form</A></DL>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#C_ANY_POINT">C_ANY_POINT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#C_GEOMETRIC">C_GEOMETRIC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#C_INTERMED_RECOMB">C_INTERMED_RECOMB</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#C_LINE_RECOMB">C_LINE_RECOMB</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#C_NONE">C_NONE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#C_ONE_POINT">C_ONE_POINT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#C_SIMULATED_BINARY">C_SIMULATED_BINARY</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#C_TWO_POINT">C_TWO_POINT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#C_UNIFORM">C_UNIFORM</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#chunksize">chunksize</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How big of chunks should we define for crossover?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#crossoverDistributionIndex">crossoverDistributionIndex</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;What should the SBX distribution index be?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#crossoverProbability">crossoverProbability</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Probability that a gene will cross over -- ONLY used in V_ANY_POINT crossover</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#crossoverType">crossoverType</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;What kind of crossover do we have?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#duplicateRetries">duplicateRetries</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How often do we retry until we get a non-duplicate gene?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#dynamicInitialSize">dynamicInitialSize</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Was the initial size determined dynamically?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;float</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#genomeIncreaseProbability">genomeIncreaseProbability</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;With what probability would our genome be at least 1 larger than it is now during initialization?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#genomeResizeAlgorithm">genomeResizeAlgorithm</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How should we reset the genome?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#genomeSize">genomeSize</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How big of a genome should we create on initialization?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#lineDistance">lineDistance</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;How far along the long a child can be located for line or intermediate recombination</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#maxInitialSize">maxInitialSize</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;What's the largest legal genome?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#minInitialSize">minInitialSize</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;What's the smallest legal genome?</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;double[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#mutationProbability">mutationProbability</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Probability that a gene will mutate, per gene.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_CHUNKSIZE">P_CHUNKSIZE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_CROSSOVER_DISTRIBUTION_INDEX">P_CROSSOVER_DISTRIBUTION_INDEX</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_CROSSOVERPROB">P_CROSSOVERPROB</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_CROSSOVERTYPE">P_CROSSOVERTYPE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_DUPLICATE_RETRIES">P_DUPLICATE_RETRIES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_GENOMESIZE">P_GENOMESIZE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_GEOMETRIC_PROBABILITY">P_GEOMETRIC_PROBABILITY</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_LINEDISTANCE">P_LINEDISTANCE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_MUTATIONPROB">P_MUTATIONPROB</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_NUM_SEGMENTS">P_NUM_SEGMENTS</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_SEGMENT">P_SEGMENT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_SEGMENT_END">P_SEGMENT_END</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_SEGMENT_START">P_SEGMENT_START</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_SEGMENT_TYPE">P_SEGMENT_TYPE</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_UNIFORM_MAX">P_UNIFORM_MAX</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_UNIFORM_MIN">P_UNIFORM_MIN</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#P_VECTORSPECIES">P_VECTORSPECIES</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#V_ANY_POINT">V_ANY_POINT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#V_GEOMETRIC">V_GEOMETRIC</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#V_INTERMED_RECOMB">V_INTERMED_RECOMB</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#V_LINE_RECOMB">V_LINE_RECOMB</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#V_ONE_POINT">V_ONE_POINT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#V_SIMULATED_BINARY">V_SIMULATED_BINARY</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#V_TWO_POINT">V_TWO_POINT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#V_UNIFORM">V_UNIFORM</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;<A NAME="fields_inherited_from_class_ec.Species"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Fields inherited from class ec.<A HREF="../../ec/Species.html" title="class in ec">Species</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../ec/Species.html#f_prototype">f_prototype</A>, <A HREF="../../ec/Species.html#i_prototype">i_prototype</A>, <A HREF="../../ec/Species.html#P_FITNESS">P_FITNESS</A>, <A HREF="../../ec/Species.html#P_INDIVIDUAL">P_INDIVIDUAL</A>, <A HREF="../../ec/Species.html#P_PIPE">P_PIPE</A>, <A HREF="../../ec/Species.html#pipe_prototype">pipe_prototype</A></CODE></TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#VectorSpecies()">VectorSpecies</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#contains(boolean[], boolean)">contains</A></B>(boolean[]&nbsp;array,
         boolean&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility method: returns the first array slot which contains the given value, else -1.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#contains(double[], double)">contains</A></B>(double[]&nbsp;array,
         double&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility method: returns the first array slot which contains the given value, else -1.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#contains(int[], int)">contains</A></B>(int[]&nbsp;array,
         int&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility method: returns the first array slot which contains the given value, else -1.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#contains(long[], long)">contains</A></B>(long[]&nbsp;array,
         long&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility method: returns the first array slot which contains the given value, else -1.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#defaultBase()">defaultBase</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the default base for this prototype.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#duplicateRetries(int)">duplicateRetries</A></B>(int&nbsp;gene)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;boolean[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#fill(boolean[], boolean)">fill</A></B>(boolean[]&nbsp;array,
     boolean&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility method: fills the array with the given value and returns it.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;double[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#fill(double[], double)">fill</A></B>(double[]&nbsp;array,
     double&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility method: fills the array with the given value and returns it.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;int[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#fill(int[], int)">fill</A></B>(int[]&nbsp;array,
     int&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility method: fills the array with the given value and returns it.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;long[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#fill(long[], long)">fill</A></B>(long[]&nbsp;array,
     long&nbsp;val)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Utility method: fills the array with the given value and returns it.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#initializeGenomeSegmentsByEndIndices(ec.EvolutionState, ec.util.Parameter, ec.util.Parameter, int)">initializeGenomeSegmentsByEndIndices</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                                     <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base,
                                     <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;def,
                                     int&nbsp;numSegments)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Looks up genome segments using end indices.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#initializeGenomeSegmentsByStartIndices(ec.EvolutionState, ec.util.Parameter, ec.util.Parameter, int)">initializeGenomeSegmentsByStartIndices</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                                       <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base,
                                       <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;def,
                                       int&nbsp;numSegments)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Looks up genome segments using start indices.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#loadParametersForGene(ec.EvolutionState, int, ec.util.Parameter, ec.util.Parameter, java.lang.String)">loadParametersForGene</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                      int&nbsp;index,
                      <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base,
                      <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;def,
                      java.lang.String&nbsp;postfix)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called when VectorSpecies is setting up per-gene and per-segment parameters.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#mutationProbability(int)">mutationProbability</A></B>(int&nbsp;gene)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../ec/Individual.html" title="class in ec">Individual</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#newIndividual(ec.EvolutionState, int)">newIndividual</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
              int&nbsp;thread)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provides a brand-new individual to fill in a population.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
      <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The default version of setup(...) loads requested pipelines and calls setup(...) on them and normalizes their probabilities.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>protected &nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../ec/vector/VectorSpecies.html#setupGenome(ec.EvolutionState, ec.util.Parameter)">setupGenome</A></B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
            <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_ec.Species"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class ec.<A HREF="../../ec/Species.html" title="class in ec">Species</A></B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><A HREF="../../ec/Species.html#clone()">clone</A>, <A HREF="../../ec/Species.html#newIndividual(ec.EvolutionState, java.io.DataInput)">newIndividual</A>, <A HREF="../../ec/Species.html#newIndividual(ec.EvolutionState, java.io.LineNumberReader)">newIndividual</A></CODE></TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="P_VECTORSPECIES"><!-- --></A><H3>
P_VECTORSPECIES</H3>
<PRE>
public static final java.lang.String <B>P_VECTORSPECIES</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_VECTORSPECIES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_CROSSOVERTYPE"><!-- --></A><H3>
P_CROSSOVERTYPE</H3>
<PRE>
public static final java.lang.String <B>P_CROSSOVERTYPE</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_CROSSOVERTYPE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_CHUNKSIZE"><!-- --></A><H3>
P_CHUNKSIZE</H3>
<PRE>
public static final java.lang.String <B>P_CHUNKSIZE</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_CHUNKSIZE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="V_ONE_POINT"><!-- --></A><H3>
V_ONE_POINT</H3>
<PRE>
public static final java.lang.String <B>V_ONE_POINT</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.V_ONE_POINT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="V_TWO_POINT"><!-- --></A><H3>
V_TWO_POINT</H3>
<PRE>
public static final java.lang.String <B>V_TWO_POINT</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.V_TWO_POINT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="V_ANY_POINT"><!-- --></A><H3>
V_ANY_POINT</H3>
<PRE>
public static final java.lang.String <B>V_ANY_POINT</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.V_ANY_POINT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="V_LINE_RECOMB"><!-- --></A><H3>
V_LINE_RECOMB</H3>
<PRE>
public static final java.lang.String <B>V_LINE_RECOMB</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.V_LINE_RECOMB">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="V_INTERMED_RECOMB"><!-- --></A><H3>
V_INTERMED_RECOMB</H3>
<PRE>
public static final java.lang.String <B>V_INTERMED_RECOMB</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.V_INTERMED_RECOMB">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="V_SIMULATED_BINARY"><!-- --></A><H3>
V_SIMULATED_BINARY</H3>
<PRE>
public static final java.lang.String <B>V_SIMULATED_BINARY</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.V_SIMULATED_BINARY">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_CROSSOVER_DISTRIBUTION_INDEX"><!-- --></A><H3>
P_CROSSOVER_DISTRIBUTION_INDEX</H3>
<PRE>
public static final java.lang.String <B>P_CROSSOVER_DISTRIBUTION_INDEX</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_CROSSOVER_DISTRIBUTION_INDEX">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_MUTATIONPROB"><!-- --></A><H3>
P_MUTATIONPROB</H3>
<PRE>
public static final java.lang.String <B>P_MUTATIONPROB</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_MUTATIONPROB">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_CROSSOVERPROB"><!-- --></A><H3>
P_CROSSOVERPROB</H3>
<PRE>
public static final java.lang.String <B>P_CROSSOVERPROB</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_CROSSOVERPROB">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_GENOMESIZE"><!-- --></A><H3>
P_GENOMESIZE</H3>
<PRE>
public static final java.lang.String <B>P_GENOMESIZE</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_GENOMESIZE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_LINEDISTANCE"><!-- --></A><H3>
P_LINEDISTANCE</H3>
<PRE>
public static final java.lang.String <B>P_LINEDISTANCE</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_LINEDISTANCE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="V_GEOMETRIC"><!-- --></A><H3>
V_GEOMETRIC</H3>
<PRE>
public static final java.lang.String <B>V_GEOMETRIC</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.V_GEOMETRIC">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_GEOMETRIC_PROBABILITY"><!-- --></A><H3>
P_GEOMETRIC_PROBABILITY</H3>
<PRE>
public static final java.lang.String <B>P_GEOMETRIC_PROBABILITY</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_GEOMETRIC_PROBABILITY">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="V_UNIFORM"><!-- --></A><H3>
V_UNIFORM</H3>
<PRE>
public static final java.lang.String <B>V_UNIFORM</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.V_UNIFORM">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_UNIFORM_MIN"><!-- --></A><H3>
P_UNIFORM_MIN</H3>
<PRE>
public static final java.lang.String <B>P_UNIFORM_MIN</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_UNIFORM_MIN">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_UNIFORM_MAX"><!-- --></A><H3>
P_UNIFORM_MAX</H3>
<PRE>
public static final java.lang.String <B>P_UNIFORM_MAX</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_UNIFORM_MAX">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_NUM_SEGMENTS"><!-- --></A><H3>
P_NUM_SEGMENTS</H3>
<PRE>
public static final java.lang.String <B>P_NUM_SEGMENTS</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_NUM_SEGMENTS">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_SEGMENT_TYPE"><!-- --></A><H3>
P_SEGMENT_TYPE</H3>
<PRE>
public static final java.lang.String <B>P_SEGMENT_TYPE</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_SEGMENT_TYPE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_SEGMENT_START"><!-- --></A><H3>
P_SEGMENT_START</H3>
<PRE>
public static final java.lang.String <B>P_SEGMENT_START</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_SEGMENT_START">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_SEGMENT_END"><!-- --></A><H3>
P_SEGMENT_END</H3>
<PRE>
public static final java.lang.String <B>P_SEGMENT_END</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_SEGMENT_END">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_SEGMENT"><!-- --></A><H3>
P_SEGMENT</H3>
<PRE>
public static final java.lang.String <B>P_SEGMENT</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_SEGMENT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="P_DUPLICATE_RETRIES"><!-- --></A><H3>
P_DUPLICATE_RETRIES</H3>
<PRE>
public static final java.lang.String <B>P_DUPLICATE_RETRIES</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.P_DUPLICATE_RETRIES">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="C_ONE_POINT"><!-- --></A><H3>
C_ONE_POINT</H3>
<PRE>
public static final int <B>C_ONE_POINT</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.C_ONE_POINT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="C_TWO_POINT"><!-- --></A><H3>
C_TWO_POINT</H3>
<PRE>
public static final int <B>C_TWO_POINT</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.C_TWO_POINT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="C_ANY_POINT"><!-- --></A><H3>
C_ANY_POINT</H3>
<PRE>
public static final int <B>C_ANY_POINT</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.C_ANY_POINT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="C_LINE_RECOMB"><!-- --></A><H3>
C_LINE_RECOMB</H3>
<PRE>
public static final int <B>C_LINE_RECOMB</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.C_LINE_RECOMB">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="C_INTERMED_RECOMB"><!-- --></A><H3>
C_INTERMED_RECOMB</H3>
<PRE>
public static final int <B>C_INTERMED_RECOMB</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.C_INTERMED_RECOMB">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="C_SIMULATED_BINARY"><!-- --></A><H3>
C_SIMULATED_BINARY</H3>
<PRE>
public static final int <B>C_SIMULATED_BINARY</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.C_SIMULATED_BINARY">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="C_NONE"><!-- --></A><H3>
C_NONE</H3>
<PRE>
public static final int <B>C_NONE</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.C_NONE">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="C_GEOMETRIC"><!-- --></A><H3>
C_GEOMETRIC</H3>
<PRE>
public static final int <B>C_GEOMETRIC</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.C_GEOMETRIC">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="C_UNIFORM"><!-- --></A><H3>
C_UNIFORM</H3>
<PRE>
public static final int <B>C_UNIFORM</B></PRE>
<DL>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../constant-values.html#ec.vector.VectorSpecies.C_UNIFORM">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="duplicateRetries"><!-- --></A><H3>
duplicateRetries</H3>
<PRE>
protected int[] <B>duplicateRetries</B></PRE>
<DL>
<DD>How often do we retry until we get a non-duplicate gene?
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="mutationProbability"><!-- --></A><H3>
mutationProbability</H3>
<PRE>
protected double[] <B>mutationProbability</B></PRE>
<DL>
<DD>Probability that a gene will mutate, per gene.
        This array is one longer than the standard genome length.
        The top element in the array represents the parameters for genes in
        genomes which have extended beyond the genome length.
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="crossoverProbability"><!-- --></A><H3>
crossoverProbability</H3>
<PRE>
public float <B>crossoverProbability</B></PRE>
<DL>
<DD>Probability that a gene will cross over -- ONLY used in V_ANY_POINT crossover
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="crossoverType"><!-- --></A><H3>
crossoverType</H3>
<PRE>
public int <B>crossoverType</B></PRE>
<DL>
<DD>What kind of crossover do we have?
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="genomeSize"><!-- --></A><H3>
genomeSize</H3>
<PRE>
public int <B>genomeSize</B></PRE>
<DL>
<DD>How big of a genome should we create on initialization?
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="crossoverDistributionIndex"><!-- --></A><H3>
crossoverDistributionIndex</H3>
<PRE>
public int <B>crossoverDistributionIndex</B></PRE>
<DL>
<DD>What should the SBX distribution index be?
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="genomeResizeAlgorithm"><!-- --></A><H3>
genomeResizeAlgorithm</H3>
<PRE>
public int <B>genomeResizeAlgorithm</B></PRE>
<DL>
<DD>How should we reset the genome?
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="minInitialSize"><!-- --></A><H3>
minInitialSize</H3>
<PRE>
public int <B>minInitialSize</B></PRE>
<DL>
<DD>What's the smallest legal genome?
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="maxInitialSize"><!-- --></A><H3>
maxInitialSize</H3>
<PRE>
public int <B>maxInitialSize</B></PRE>
<DL>
<DD>What's the largest legal genome?
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="genomeIncreaseProbability"><!-- --></A><H3>
genomeIncreaseProbability</H3>
<PRE>
public float <B>genomeIncreaseProbability</B></PRE>
<DL>
<DD>With what probability would our genome be at least 1 larger than it is now during initialization?
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="chunksize"><!-- --></A><H3>
chunksize</H3>
<PRE>
public int <B>chunksize</B></PRE>
<DL>
<DD>How big of chunks should we define for crossover?
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="lineDistance"><!-- --></A><H3>
lineDistance</H3>
<PRE>
public double <B>lineDistance</B></PRE>
<DL>
<DD>How far along the long a child can be located for line or intermediate recombination
<P>
<DL>
</DL>
</DL>
<HR>

<A NAME="dynamicInitialSize"><!-- --></A><H3>
dynamicInitialSize</H3>
<PRE>
public boolean <B>dynamicInitialSize</B></PRE>
<DL>
<DD>Was the initial size determined dynamically?
<P>
<DL>
</DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="VectorSpecies()"><!-- --></A><H3>
VectorSpecies</H3>
<PRE>
public <B>VectorSpecies</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="mutationProbability(int)"><!-- --></A><H3>
mutationProbability</H3>
<PRE>
public double <B>mutationProbability</B>(int&nbsp;gene)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="duplicateRetries(int)"><!-- --></A><H3>
duplicateRetries</H3>
<PRE>
public int <B>duplicateRetries</B>(int&nbsp;gene)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="defaultBase()"><!-- --></A><H3>
defaultBase</H3>
<PRE>
public <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A> <B>defaultBase</B>()</PRE>
<DL>
<DD><B>Description copied from interface: <CODE><A HREF="../../ec/Prototype.html#defaultBase()">Prototype</A></CODE></B></DD>
<DD>Returns the default base for this prototype.
        This should generally be implemented by building off of the static base()
        method on the DefaultsForm object for the prototype's package. This should
        be callable during setup(...).
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setupGenome(ec.EvolutionState, ec.util.Parameter)"><!-- --></A><H3>
setupGenome</H3>
<PRE>
protected void <B>setupGenome</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                           <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base)</PRE>
<DL>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="setup(ec.EvolutionState, ec.util.Parameter)"><!-- --></A><H3>
setup</H3>
<PRE>
public void <B>setup</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                  <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../ec/Species.html#setup(ec.EvolutionState, ec.util.Parameter)">Species</A></CODE></B></DD>
<DD>The default version of setup(...) loads requested pipelines and calls setup(...) on them and normalizes their probabilities.  
        If your individual prototype might need to know special things about the species (like parameters stored in it),
        then when you override this setup method, you'll need to set those parameters BEFORE you call super.setup(...),
        because the setup(...) code in Species sets up the prototype.
<P>
<DD><DL>
<DT><B>Specified by:</B><DD><CODE><A HREF="../../ec/Prototype.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></CODE> in interface <CODE><A HREF="../../ec/Prototype.html" title="interface in ec">Prototype</A></CODE><DT><B>Specified by:</B><DD><CODE><A HREF="../../ec/Setup.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></CODE> in interface <CODE><A HREF="../../ec/Setup.html" title="interface in ec">Setup</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../ec/Species.html#setup(ec.EvolutionState, ec.util.Parameter)">setup</A></CODE> in class <CODE><A HREF="../../ec/Species.html" title="class in ec">Species</A></CODE></DL>
</DD>
<DD><DL>
<DT><B>See Also:</B><DD><A HREF="../../ec/Prototype.html#setup(ec.EvolutionState, ec.util.Parameter)"><CODE>Prototype.setup(EvolutionState,Parameter)</CODE></A></DL>
</DD>
</DL>
<HR>

<A NAME="loadParametersForGene(ec.EvolutionState, int, ec.util.Parameter, ec.util.Parameter, java.lang.String)"><!-- --></A><H3>
loadParametersForGene</H3>
<PRE>
protected void <B>loadParametersForGene</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                                     int&nbsp;index,
                                     <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base,
                                     <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;def,
                                     java.lang.String&nbsp;postfix)</PRE>
<DL>
<DD>Called when VectorSpecies is setting up per-gene and per-segment parameters.  The index
        is the current gene whose parameter is getting set up.  The Parameters in question are the
        bases for the gene.  The postfix should be appended to the end of any parameter looked up
        (it often contains a number indicating the gene in question), such as
        state.parameters.exists(base.push(P_PARAM).push(postfix), def.push(P_PARAM).push(postfix)

        <p>If you override this method, be sure to call super(...) at some point, ideally first.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="initializeGenomeSegmentsByStartIndices(ec.EvolutionState, ec.util.Parameter, ec.util.Parameter, int)"><!-- --></A><H3>
initializeGenomeSegmentsByStartIndices</H3>
<PRE>
protected void <B>initializeGenomeSegmentsByStartIndices</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                                                      <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base,
                                                      <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;def,
                                                      int&nbsp;numSegments)</PRE>
<DL>
<DD>Looks up genome segments using start indices.  Segments run up to the next declared start index.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="initializeGenomeSegmentsByEndIndices(ec.EvolutionState, ec.util.Parameter, ec.util.Parameter, int)"><!-- --></A><H3>
initializeGenomeSegmentsByEndIndices</H3>
<PRE>
protected void <B>initializeGenomeSegmentsByEndIndices</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                                                    <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;base,
                                                    <A HREF="../../ec/util/Parameter.html" title="class in ec.util">Parameter</A>&nbsp;def,
                                                    int&nbsp;numSegments)</PRE>
<DL>
<DD>Looks up genome segments using end indices.  Segments run from the previously declared end index.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="newIndividual(ec.EvolutionState, int)"><!-- --></A><H3>
newIndividual</H3>
<PRE>
public <A HREF="../../ec/Individual.html" title="class in ec">Individual</A> <B>newIndividual</B>(<A HREF="../../ec/EvolutionState.html" title="class in ec">EvolutionState</A>&nbsp;state,
                                int&nbsp;thread)</PRE>
<DL>
<DD><B>Description copied from class: <CODE><A HREF="../../ec/Species.html#newIndividual(ec.EvolutionState, int)">Species</A></CODE></B></DD>
<DD>Provides a brand-new individual to fill in a population.  The default form
        simply calls clone(), creates a fitness, sets evaluated to false, and sets
        the species.  If you need to make a more custom genotype (as is the case
        for GPSpecies, which requires a light rather than deep clone), 
        you will need to override this method as you see fit.
<P>
<DD><DL>
<DT><B>Overrides:</B><DD><CODE><A HREF="../../ec/Species.html#newIndividual(ec.EvolutionState, int)">newIndividual</A></CODE> in class <CODE><A HREF="../../ec/Species.html" title="class in ec">Species</A></CODE></DL>
</DD>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="fill(long[], long)"><!-- --></A><H3>
fill</H3>
<PRE>
protected long[] <B>fill</B>(long[]&nbsp;array,
                      long&nbsp;val)</PRE>
<DL>
<DD>Utility method: fills the array with the given value and returns it.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="fill(int[], int)"><!-- --></A><H3>
fill</H3>
<PRE>
protected int[] <B>fill</B>(int[]&nbsp;array,
                     int&nbsp;val)</PRE>
<DL>
<DD>Utility method: fills the array with the given value and returns it.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="fill(boolean[], boolean)"><!-- --></A><H3>
fill</H3>
<PRE>
protected boolean[] <B>fill</B>(boolean[]&nbsp;array,
                         boolean&nbsp;val)</PRE>
<DL>
<DD>Utility method: fills the array with the given value and returns it.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="fill(double[], double)"><!-- --></A><H3>
fill</H3>
<PRE>
protected double[] <B>fill</B>(double[]&nbsp;array,
                        double&nbsp;val)</PRE>
<DL>
<DD>Utility method: fills the array with the given value and returns it.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="contains(boolean[], boolean)"><!-- --></A><H3>
contains</H3>
<PRE>
protected int <B>contains</B>(boolean[]&nbsp;array,
                       boolean&nbsp;val)</PRE>
<DL>
<DD>Utility method: returns the first array slot which contains the given value, else -1.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="contains(long[], long)"><!-- --></A><H3>
contains</H3>
<PRE>
protected int <B>contains</B>(long[]&nbsp;array,
                       long&nbsp;val)</PRE>
<DL>
<DD>Utility method: returns the first array slot which contains the given value, else -1.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="contains(int[], int)"><!-- --></A><H3>
contains</H3>
<PRE>
protected int <B>contains</B>(int[]&nbsp;array,
                       int&nbsp;val)</PRE>
<DL>
<DD>Utility method: returns the first array slot which contains the given value, else -1.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<HR>

<A NAME="contains(double[], double)"><!-- --></A><H3>
contains</H3>
<PRE>
protected int <B>contains</B>(double[]&nbsp;array,
                       double&nbsp;val)</PRE>
<DL>
<DD>Utility method: returns the first array slot which contains the given value, else -1.
<P>
<DD><DL>
</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../ec/vector/VectorIndividual.html" title="class in ec.vector"><B>PREV CLASS</B></A>&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../index.html?ec/vector/VectorSpecies.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="VectorSpecies.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
