<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE config SYSTEM "http://www.matsim.org/files/dtd/config_v1.dtd">
<config>

<!-- ====================================================================== -->

	<module name="TimeAllocationMutator" >

		<!-- Defines how many seconds a time mutation can maximally shift a time. -->
		<param name="mutationRange" value="0.0" />
	</module>

<!-- ====================================================================== -->

	<module name="controler" >
		<param name="enableLinkToLinkRouting" value="false" />

		<!-- Specifies the file format for writing events. Currently supported: txt, xml. Multiple values can be specified separated by commas (','). -->
		<param name="eventsFileFormat" value="xml" />
		<param name="firstIteration" value="0" />
		<param name="lastIteration" value="100" />

		<!-- Defines which mobility simulation will be used. Currently supported: queueSimulation qsim JDEQSim multimodalQSim  -->
		<param name="mobsim" value="null" />
		<param name="outputDirectory" value="./test/output/org/matsim/contrib/grips/scenariogenerator/ScenarioGeneratorTest/testScenarioGenerator/output" />

		<!-- The type of routing (least cost path) algorithm used, may have the values: Dijkstra, FastDijkstra, AStarLandmarks or FastAStarLandmarks -->
		<param name="routingAlgorithmType" value="Dijkstra" />

		<!-- An identifier for the current run which is used as prefix for output files and mentioned in output xml files etc. -->
		<param name="runId" value="null" />

		<!-- Comma-separated list of visualizer output file formats. `transims', `googleearth', and `otfvis'. -->
		<param name="snapshotFormat" value="" />

		<!-- iterationNumber % writeEventsInterval == 0 defines in which iterations events are written to a file. `0' disables events writing completely. -->
		<param name="writeEventsInterval" value="10" />

		<!-- iterationNumber % writePlansInterval == 0 defines (hopefully) in which iterations plans are written to a file. `0' disables plans writing completely.  Some plans in early iterations are always written -->
		<param name="writePlansInterval" value="10" />

		<!-- iterationNumber % writeSnapshotsInterval == 0 defines in which iterations snapshots are written to a file. `0' disables snapshots writing completely -->
		<param name="writeSnapshotsInterval" value="1" />
	</module>

<!-- ====================================================================== -->

	<module name="counts" >

		<!-- Specifies over how many iterations the link volumes should be averaged that are used for the counts comparison. Use 1 or 0 to only use the link volumes of a single iteration. This values cannot be larger than the value specified for writeCountsInterval -->
		<param name="averageCountsOverIterations" value="5" />

		<!-- factor by which to re-scale the simulated values.  necessary when simulation runs with something different from 100%.  needs to be adapted manually -->
		<param name="countsScaleFactor" value="1.0" />

		<!-- distance to distanceFilterCenterNode to include counting stations. The unit of distance is the Euclidean distance implied by the coordinate system -->
		<param name="distanceFilter" value="null" />

		<!-- node id for center node of distance filter -->
		<param name="distanceFilterCenterNode" value="null" />

		<!-- input file name to counts package -->
		<param name="inputCountsFile" value="null" />

		<!-- possible values: `html', `kml', `txt', `all' -->
		<param name="outputformat" value="null" />

		<!-- Specifies how often the counts comparison should be calculated and written. -->
		<param name="writeCountsInterval" value="10" />
	</module>

<!-- ====================================================================== -->

	<module name="facilities" >
		<param name="inputFacilitiesFile" value="null" />
	</module>

<!-- ====================================================================== -->

	<module name="global" >
		<param name="coordinateSystem" value="EPSG:3395" />
		<param name="numberOfThreads" value="2" />
		<param name="randomSeed" value="4711" />
	</module>

<!-- ====================================================================== -->

	<module name="grips" >
		<param name="evacuationAreaFile" value="./test/input/org/matsim/contrib/grips/scenariogenerator/ScenarioGeneratorTest/testScenarioGenerator/evacuation_area.shp" />
		<param name="networkFile" value="./test/input/org/matsim/contrib/grips/scenariogenerator/ScenarioGeneratorTest/testScenarioGenerator/lenzen.osm" />
		<param name="outputDir" value="./test/output/org/matsim/contrib/grips/scenariogenerator/ScenarioGeneratorTest/testScenarioGenerator" />
		<param name="populationFile" value="./test/input/org/matsim/contrib/grips/scenariogenerator/ScenarioGeneratorTest/testScenarioGenerator/population.shp" />
		<param name="sampleSize" value="1.0" />
	</module>

<!-- ====================================================================== -->

	<module name="households" >
		<param name="inputFile" value="null" />
	</module>

<!-- ====================================================================== -->

	<module name="linkStats" >

		<!-- Specifies over how many iterations the link volumes should be averaged that are used for the link statistics. Use 1 or 0 to only use the link volumes of a single iteration. This values cannot be larger than the value specified for writeLinkStatsInterval -->
		<param name="averageLinkStatsOverIterations" value="5" />

		<!-- Specifies how often the link stats should be calculated and written. Use 0 to disable the generation of link stats. -->
		<param name="writeLinkStatsInterval" value="10" />
	</module>

<!-- ====================================================================== -->

	<module name="locationchoice" >
		<param name="algorithm" value="null" />
		<param name="analysisBinSize" value="20000.0" />
		<param name="analysisBoundary" value="200000.0" />
		<param name="centerNode" value="null" />
		<param name="destinationSamplePercent" value="100.0" />
		<param name="epsilonDistribution" value="gumbel" />
		<param name="epsilonScaleFactors" value="null" />
		<param name="fkValuesFile" value="null" />
		<param name="flexible_types" value="null" />
		<param name="idExclusion" value="2147483647" />
		<param name="maxDistanceEpsilon" value="-1.0" />
		<param name="maxEpsFile" value="null" />
		<param name="maxRecursions" value="1" />
		<param name="pkValuesFile" value="null" />
		<param name="planSelector" value="SelectExpBeta" />
		<param name="probChoiceExponent" value="3" />
		<param name="probChoiceSetSize" value="10" />
		<param name="radius" value="null" />
		<param name="randomSeed" value="221177" />
		<param name="recursionTravelSpeed" value="8.5" />
		<param name="recursionTravelSpeedChange" value="0.1" />
		<param name="restraintFcnExp" value="0.0" />
		<param name="restraintFcnFactor" value="0.0" />
		<param name="scaleFactor" value="1" />
		<param name="tt_approximationLevel" value="0" />
	</module>

<!-- ====================================================================== -->

	<module name="multimodal" >

		<!-- Use this, if your network is not multi modal. Links with free speeds that are lower than the specified cutoff value will be usable for walk and bike trips. -->
		<param name="createMultiModalNetwork" value="false" />

		<!-- Only used, if createMultiModalNetwork is enabled (set value in m/s). -->
		<param name="cuttoffValueForNonCarModes" value="22.22222222222222" />
		<param name="dropNonCarRoutes" value="false" />
		<param name="multiModalSimulationEnabled" value="false" />

		<!-- Use number of threads > 1 for parallel version using the specified number of threads. -->
		<param name="numberOfThreads" value="1" />
		<param name="simulatedModes" value="pt,walk,ride,bike" />
	</module>

<!-- ====================================================================== -->

	<module name="network" >
		<param name="inputChangeEventsFile" value="null" />
		<param name="inputNetworkFile" value="./test/output/org/matsim/contrib/grips/scenariogenerator/ScenarioGeneratorTest/testScenarioGenerator/network.xml.gz" />
		<param name="laneDefinitionsFile" value="null" />
		<param name="timeVariantNetwork" value="false" />
	</module>

<!-- ====================================================================== -->

	<module name="otfvis" >

		<!-- The (initial) size of the agents.  Only a range of numbers is allowed, otherwise otfvis aborts rather ungracefully, or displays no agents at all. -->
		<param name="agentSize" value="120.0" />

		<!-- coloring scheme for otfvis.  Currently (2012) allowed values:null standard bvg bvg2 byId -->
		<param name="coloringScheme" value="standard" />
		<param name="leftMouseFunc" value="Zoom" />

		<!-- The (initial) width of the links of the network. Use positive floating point values. -->
		<param name="linkWidth" value="30.0" />

		<!-- Link width is proportional to `numberOfLanes' or to `capacity'. -->
		<param name="linkwidthIsProportionalTo" value="numberOfLanes" />

		<!-- Render everything on top of OpenStreetMap tiles. -->
		<param name="mapOverlayMode" value="true" />
		<param name="middleMouseFunc" value="Pan" />

		<!-- Shortens a link's start and end point in the visualization.  -->
		<param name="nodeOffset" value="0.0" />
		<param name="rightMouseFunc" value="Select" />
		<param name="showTeleportation" value="false" />
	</module>

<!-- ====================================================================== -->

	<module name="parallelEventHandling" >

		<!-- estimated number of events during mobsim run, useful for configuration -->
		<param name="estimatedNumberOfEvents" value="null" />

		<!-- number of threads for parallel events handler.  0 or null means parallel events handler is disabled -->
		<param name="numberOfThreads" value="null" />
	</module>

<!-- ====================================================================== -->

	<module name="planCalcScore" >

		<!-- logit model scale parameter. default: 2.  Has name and default value for historical reasons (see Bryan Raney's phd thesis).  Should be in strategyConfigGroup. -->
		<param name="BrainExpBeta" value="2.0" />
		<param name="PathSizeLogitBeta" value="1.0" />
		<param name="activityClosingTime_0" value="00:00:49" />
		<param name="activityClosingTime_1" value="00:00:49" />
		<param name="activityEarliestEndTime_0" value="00:00:49" />
		<param name="activityEarliestEndTime_1" value="00:00:49" />
		<param name="activityLatestStartTime_0" value="00:00:49" />
		<param name="activityLatestStartTime_1" value="00:00:49" />
		<param name="activityMinimalDuration_0" value="00:00:49" />
		<param name="activityMinimalDuration_1" value="00:00:49" />
		<param name="activityOpeningTime_0" value="00:00:49" />
		<param name="activityOpeningTime_1" value="00:00:49" />
		<param name="activityPriority_0" value="1.0" />
		<param name="activityPriority_1" value="1.0" />
		<param name="activityType_0" value="pre-evac" />
		<param name="activityType_1" value="post-evac" />
		<param name="activityTypicalDuration_0" value="00:00:49" />
		<param name="activityTypicalDuration_1" value="00:00:49" />

		<!-- [utils] alternative-specific constant for bike.  no guarantee that this is used anywhere. default=0 to be backwards compatible for the time being -->
		<param name="constantBike" value="0.0" />

		<!-- [utils] alternative-specific constant for car.  no guarantee that this is used anywhere. default=0 to be backwards compatible for the time being -->
		<param name="constantCar" value="0.0" />
		<param name="constantOther" value="0.0" />

		<!-- [utils] alternative-specific constant for pt.  no guarantee that this is used anywhere. default=0 to be backwards compatible for the time being -->
		<param name="constantPt" value="0.0" />

		<!-- [utils] alternative-specific constant for walk.  no guarantee that this is used anywhere. default=0 to be backwards compatible for the time being -->
		<param name="constantWalk" value="0.0" />

		<!-- [utils/hr] utility for departing early (i.e. before the earliest end time).  Probably implemented correctly, but not tested. -->
		<param name="earlyDeparture" value="-0.0" />

		<!-- [utils/hr] utility for arriving late (i.e. after the latest start time).  normally negative -->
		<param name="lateArrival" value="0.0" />

		<!-- new_score = (1-learningRate)*old_score + learningRate * score_from_mobsim.  learning rates close to zero emulate score averaging, but slow down initial convergence -->
		<param name="learningRate" value="1.0" />

		<!-- [utils/unit_of_money] conversion of money (e.g. toll, distance cost) into utils -->
		<param name="marginalUtilityOfMoney" value="1.0" />
		<param name="marginalUtlOfDistanceOther" value="0.0" />

		<!-- [utils/m] utility of walking per m, normally negative.  this is on top of the time (dis)utility. -->
		<param name="marginalUtlOfDistanceWalk" value="0.0" />

		<!-- [unit_of_money/m] conversion of car distance into money. Probably needs to be negative to work. -->
		<param name="monetaryDistanceCostRateCar" value="0.0" />

		<!-- [unit_of_money/m] conversion of pt distance into money. Probably needs to be negative to work. -->
		<param name="monetaryDistanceCostRatePt" value="0.0" />

		<!-- [utils/hr] marginal utility of doing an activity.  normally positive.  also the opportunity cost of time if agent is doing nothing. -->
		<param name="performing" value="0.0" />

		<!-- [utils/hr] additional marginal utility of traveling by car.  normally negative.  this comes on top of the opportunity cost of time -->
		<param name="traveling" value="-6.0" />
		<param name="travelingBike" value="-6.0" />
		<param name="travelingOther" value="-6.0" />

		<!-- [utils/hr] additional marginal utility offset of traveling by pt.  normally negative.  this comes on top of the opportunity cost of time -->
		<param name="travelingPt" value="-6.0" />

		<!-- [utils/hr] additional marginal utility offset of traveling by foot.  normally negative.  this comes on top of the opportunity cost of time.  also see marginalUtlOfDistanceWalk -->
		<param name="travelingWalk" value="-6.0" />

		<!-- [utils] utility of switching a line (= transfer penalty).  Normally negative -->
		<param name="utilityOfLineSwitch" value="-1.0" />

		<!-- [utils/hr] utility offset for waiting.  this comes on top of the opportunity cost of time.  Probably implemented correctly, but not tested. -->
		<param name="waiting" value="-0.0" />

		<!-- write a plans file in each iteration directory which contains what each agent actually did, and the score it received. -->
		<param name="writeExperiencedPlans" value="false" />
	</module>

<!-- ====================================================================== -->

	<module name="planomat" >
		<param name="doLogging" value="false" />
		<param name="jgapMaxGenerations" value="100" />
		<param name="levelOfTimeResolution" value="7" />
		<param name="populationSize" value="-2147483648" />
		<param name="possibleModes" value="" />
		<param name="routingCapability" value="fixedRoute" />
		<param name="simLegInterpretation" value="CetinCompatible" />
		<param name="tripStructureAnalysisLayer" value="facility" />
	</module>

<!-- ====================================================================== -->

	<module name="plans" >
		<param name="inputPlansFile" value="./test/output/org/matsim/contrib/grips/scenariogenerator/ScenarioGeneratorTest/testScenarioGenerator/population.xml.gz" />

		<!-- Defines how routes are stored in memory. Currently supported: LinkNetworkRoute, CompressedNetworkRoute. -->
		<param name="networkRouteType" value="LinkNetworkRoute" />
	</module>

<!-- ====================================================================== -->

	<module name="planscalcroute" >

		<!-- factor with which beeline distances (and therefore times) are multiplied in order to obtain an estimate of the network distances/times.  Default is something like 1.3 -->
		<param name="beelineDistanceFactor" value="1.3" />

		<!-- All the modes for which the router is supposed to generate network routes (like car) -->
		<param name="networkModes" value="car,ride" />

		<!-- Free-speed factor for a teleported mode based on freespeed: freespeedFactor * <freespeed car travel time>. Insert a line like this for every such mode. freespeedFactor wins over teleportedModeSpeed, if both are set (says michaz). -->
		<param name="teleportedModeFreespeedFactor_pt" value="2.0" />

		<!-- Speed for a teleported mode based on beeline-distance: (<beeline distance> * beelineDistanceFactor) / speed. Insert a line like this for every such mode. -->
		<param name="teleportedModeSpeed_bike" value="4.166666666666667" />

		<!-- Speed for a teleported mode based on beeline-distance: (<beeline distance> * beelineDistanceFactor) / speed. Insert a line like this for every such mode. -->
		<param name="teleportedModeSpeed_undefined" value="13.88888888888889" />

		<!-- Speed for a teleported mode based on beeline-distance: (<beeline distance> * beelineDistanceFactor) / speed. Insert a line like this for every such mode. -->
		<param name="teleportedModeSpeed_walk" value="0.8333333333333333" />
	</module>

<!-- ====================================================================== -->

	<module name="ptCounts" >

		<!-- factor by which to re-scale the simulated values.  necessary when simulation runs with something different from 100%.  needs to be adapted manually -->
		<param name="countsScaleFactor" value="1.0" />

		<!-- distance to distanceFilterCenterNode to include counting stations. The unit of distance is the Euclidean distance implied by the coordinate system -->
		<param name="distanceFilter" value="null" />

		<!-- node id for center node of distance filter -->
		<param name="distanceFilterCenterNode" value="null" />

		<!-- input file containing the alighting (getting off) counts for pt -->
		<param name="inputAlightCountsFile" value="null" />

		<!-- input file containing the boarding (getting on) counts for pt -->
		<param name="inputBoardCountsFile" value="null" />

		<!-- input file containing the occupancy counts for pt -->
		<param name="inputOccupancyCountsFile" value="null" />

		<!-- possible values: `html', `kml', `txt', `all' -->
		<param name="outputformat" value="null" />

		<!-- every how many iterations (starting with 0) counts comparisons are generated -->
		<param name="ptCountsInterval" value="10" />
	</module>

<!-- ====================================================================== -->

	<module name="roadpricing" >
	</module>

<!-- ====================================================================== -->

	<module name="scenario" >

		<!-- Set this parameter to true if households should be used, false if not. -->
		<param name="useHouseholds" value="false" />

		<!-- Set this parameter to true if knowledge should be used, false if not. -->
		<param name="useKnowledge" value="true" />

		<!-- Set this parameter to true if lanes should be used, false if not. -->
		<param name="useLanes" value="false" />

		<!-- Set this parameter to true if roadpricing should be used, false if not. -->
		<param name="useRoadpricing" value="false" />

		<!-- Set this parameter to true if signal systems should be used, false if not. -->
		<param name="useSignalsystems" value="false" />

		<!-- Set this parameter to true if transit should be simulated, false if not. -->
		<param name="useTransit" value="false" />

		<!-- Set this parameter to true if vehicles should be used, false if not. -->
		<param name="useVehicles" value="false" />
	</module>

<!-- ====================================================================== -->

	<module name="signalsystems" >
		<param name="ambertimes" value="null" />
		<param name="intergreentimes" value="null" />
		<param name="signalcontrol" value="null" />
		<param name="signalgroups" value="null" />
		<param name="signalsystems" value="null" />
		<param name="useAmbertimes" value="false" />
		<param name="useIntergreentimes" value="false" />
	</module>

<!-- ====================================================================== -->

	<module name="simulation" >
		<param name="endTime" value="undefined" />
		<param name="flowCapacityFactor" value="1.0" />

		<!-- Boolean. `true': stuck vehicles are removed, aborting the plan; `false': stuck vehicles are forced into the next link. `false' is probably the better choice. -->
		<param name="removeStuckVehicles" value="false" />

		<!-- snapshotStyle: `equiDist' (vehicles equidistant on link) or `queue' (vehicles queued at end of link) -->
		<param name="snapshotStyle" value="equiDist" />
		<param name="snapshotperiod" value="00:00:00" />
		<param name="startTime" value="undefined" />
		<param name="storageCapacityFactor" value="1.0" />

		<!-- time in seconds.  Time after which the frontmost vehicle on a link is called `stuck' if it does not move. -->
		<param name="stuckTime" value="100.0" />
		<param name="timeStepSize" value="00:00:01" />
		<param name="timeout" value="3600" />
	</module>

<!-- ====================================================================== -->

	<module name="strategy" >
		<param name="ExternalExeConfigTemplate" value="null" />
		<param name="ExternalExeTimeOut" value="3600" />
		<param name="ExternalExeTmpFileRootDir" value="null" />

		<!-- iteration after which module will be disabled.  most useful for ``innovative'' strategies (new routes, new times, ...) -->
		<param name="ModuleDisableAfterIteration_1" value="75" />

		<!-- iteration after which module will be disabled.  most useful for ``innovative'' strategies (new routes, new times, ...) -->
		<param name="ModuleDisableAfterIteration_2" value="null" />

		<!-- path to external executable (if applicable) -->
		<param name="ModuleExePath_1" value="null" />

		<!-- path to external executable (if applicable) -->
		<param name="ModuleExePath_2" value="null" />

		<!-- probability that a strategy is applied to a given a person.  despite its name, this really is a ``weight'' -->
		<param name="ModuleProbability_1" value="0.1" />

		<!-- probability that a strategy is applied to a given a person.  despite its name, this really is a ``weight'' -->
		<param name="ModuleProbability_2" value="0.9" />

		<!-- name of strategy (if not full class name, resolved in StrategyManagerConfigLoader) -->
		<param name="Module_1" value="ReRoute" />

		<!-- name of strategy (if not full class name, resolved in StrategyManagerConfigLoader) -->
		<param name="Module_2" value="ChangeExpBeta" />

		<!-- maximum number of plans per agent.  ``0'' means ``infinity''.  Currently (2010), ``5'' is a good number -->
		<param name="maxAgentPlanMemorySize" value="3" />

		<!-- name of PlanSelector for plans removal.  If not full class name, resolved in StrategyManagerConfigLoader.  default is `null', which eventually calls SelectWorstPlan. This is not a good choice from a discrete choice theoretical perspective. Alternatives, however, have not been systematically tested. kai, feb'12 -->
		<param name="planSelectorForRemoval" value="null" />
	</module>

<!-- ====================================================================== -->

	<module name="transit" >

		<!-- Comma-separated list of transportation modes that are handled as transit. Defaults to 'pt'. -->
		<param name="transitModes" value="pt" />

		<!-- Input file containing the transit schedule to be simulated. -->
		<param name="transitScheduleFile" value="null" />

		<!-- Input file containing the vehicles used by the departures in the transit schedule. -->
		<param name="vehiclesFile" value="null" />
	</module>

<!-- ====================================================================== -->

	<module name="transitRouter" >

		<!-- additional time the router allocates when a line switch happens, Can be interpreted as a 'savity' time that agents need to savely transfer from one line to another -->
		<param name="additionalTransferTime" value="0.0" />

		<!-- step size to increase searchRadius if no stops are found -->
		<param name="extensionRadius" value="200.0" />

		<!-- maximum beeline distance between stops that agents could transfer to by walking -->
		<param name="maxBeelineWalkConnectionDistance" value="100.0" />

		<!-- the radius in which stop locations are searched, given a start or target coordinate -->
		<param name="searchRadius" value="1000.0" />
	</module>

<!-- ====================================================================== -->

	<module name="travelTimeCalculator" >

		<!-- Transport modes that will be respected by the travel time collector. 'car' is default, which includes also bussed from the pt simulation module. Use this parameter in combination with 'filterModes' = true! -->
		<param name="analyzedModes" value="car" />
		<param name="calculateLinkToLinkTravelTimes" value="false" />
		<param name="calculateLinkTravelTimes" value="true" />

		<!-- If true, link travel times from legs performed on modes not included in the 'analyzedModes' parameter are ignored. -->
		<param name="filterModes" value="false" />

		<!-- How to deal with congested time bins that have no link entry events. `optimistic' assumes free speed (too optimistic); 'experimental_LastMile' is experimental and probably too pessimistic. -->
		<param name="travelTimeAggregator" value="optimistic" />

		<!-- The size of the time bin (in sec) into which the link travel times are aggregated for the router -->
		<param name="travelTimeBinSize" value="120" />
		<param name="travelTimeCalculator" value="TravelTimeCalculatorHashMap" />

		<!-- How to deal with link entry times at different positions during the time bin. Currently supported: average, linearinterpolation -->
		<param name="travelTimeGetter" value="average" />
	</module>

<!-- ====================================================================== -->

	<module name="vspExperimental" >

		<!-- String: minOfDurationAndEndTime tryEndTimeThenDuration endTimeOnly. Anything besides minOfDurationAndEndTime will internally use a different (simpler) version of the TimeAllocationMutator. -->
		<param name="activityDurationInterpretation" value="minOfDurationAndEndTime" />

		<!-- REQUIRED: file with HBEFA 3.1 fleet average cold emission factors -->
		<param name="averageFleetColdEmissionFactorsFile" value="null" />

		<!-- REQUIRED: file with HBEFA 3.1 fleet average warm emission factors -->
		<param name="averageFleetWarmEmissionFactorsFile" value="null" />

		<!-- (do not use) set chainBasedModes for subTourModeChoice by Yu. E.g. "car,bike", "car" -->
		<param name="chainBasedModes" value="car" />

		<!-- OPTIONAL: file with HBEFA 3.1 detailed cold emission factors -->
		<param name="detailedColdEmissionFactorsFile" value="null" />

		<!-- OPTIONAL: file with HBEFA 3.1 detailed warm emission factors -->
		<param name="detailedWarmEmissionFactorsFile" value="null" />

		<!-- REQUIRED: mapping from input road types to HBEFA 3.1 road type strings -->
		<param name="emissionRoadTypeMappingFile" value="null" />

		<!-- definition of a vehicle for every person (who is allowed to choose a vehicle in the simulation):
 - REQUIRED: vehicle type Id must start with the respective HbefaVehicleCategory followed by `;'
 - OPTIONAL: if detailed emission calculation is switched on, vehicle type Id should aditionally contain HbefaVehicleAttributes (`Technology;SizeClasse;EmConcept'), corresponding to the strings in detailedWarmEmissionFactorsFile -->
		<param name="emissionVehicleFile" value="null" />

		<!-- Set this filename of MZ05 daily analysis -->
		<param name="inputMZ05File" value="" />
		<param name="isGeneratingBoardingDeniedEvent" value="false" />
		<param name="logitScaleParamForPlansRemoval" value="1." />

		<!-- changes MATSim's global time format used in output files. Can be used to enforce writing fractional seconds e.g. in output_plans.  default is `hh:mm:ss' (because of backwards compatibility). see Time.java for possible formats -->
		<param name="matsimGlobalTimeformat" value="HH:mm:ss" />

		<!-- (do not use) set the traffic mode option for subTourModeChoice by Yu -->
		<param name="modes" value="car, pt" />

		<!-- (not yet implemented) will remove plan attributes that are presumably not used, such as activityStartTime. default=false -->
		<param name="removingUnnecessaryPlanAttributes" value="false" />
		<param name="scoreMSAStartsAtIteration" value="null" />

		<!-- if true then detailed emission factor files must be provided! -->
		<param name="usingDetailedEmissionCalculation" value="false" />

		<!-- indicates if, for routing, the opportunity cost of time should be added to the mode-specific marginal utilities of time.
		Default is true; false is possible only for backwards compatibility.
		This is only a suggestion since there is (by matsim design) no way to enforce that mental modules obey this. -->
		<param name="usingOpportunityCostOfTimeForPtRouting" value="true" />

		<!-- Options: `ignore', `warn', `abort'.  Default: either `ignore' or `warn'.
		When violating VSP defaults, this results in nothing, warnings, or aborts.  Members of VSP should use `abort' or talk to kai. -->
		<param name="vspDefaultsCheckingLevel" value="ignore" />

		<!-- if true then writes output_events in output directory.  default is `false'. Will only work when lastIteration is multiple of events writing interval -->
		<param name="writingOutputEvents" value="false" />
	</module>

<!-- ====================================================================== -->

</config>
