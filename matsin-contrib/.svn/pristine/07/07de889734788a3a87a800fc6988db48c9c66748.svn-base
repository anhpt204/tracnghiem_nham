/* *********************************************************************** *
 * project: org.matsim.contrib.networkEditor
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2012 Marcel Rieser
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */

package org.matsim.contrib.networkEditor.utils;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.matsim.core.utils.geometry.geotools.MGC;
import org.opengis.referencing.crs.CoordinateReferenceSystem;

/**
 * @author mrieser / senozon
 */
public class OsmImport extends javax.swing.JDialog {

	private static final long serialVersionUID = 1L;
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnCancel;
	private javax.swing.JRadioButton btnEPSG;
	private javax.swing.ButtonGroup btnGroup;
	private javax.swing.JButton btnOk;
	private javax.swing.JRadioButton btnWKT;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel lblInfo;
	private javax.swing.JScrollPane scrlWKT;
	private javax.swing.JTextField txtEPSG;
	private javax.swing.JTextArea txtWKT;
	// End of variables declaration//GEN-END:variables

	private String identifiedCrsString = null;

	/**
	 * Creates new form OsmImport
	 */
	public OsmImport(final Frame owner) {
		super(owner, true);
		initComponents();
		setupComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		btnGroup = new javax.swing.ButtonGroup();
		jLabel1 = new javax.swing.JLabel();
		btnEPSG = new javax.swing.JRadioButton();
		txtEPSG = new javax.swing.JTextField();
		btnWKT = new javax.swing.JRadioButton();
		scrlWKT = new javax.swing.JScrollPane();
		txtWKT = new javax.swing.JTextArea();
		btnOk = new javax.swing.JButton();
		btnCancel = new javax.swing.JButton();
		lblInfo = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);

		jLabel1.setText("Transform coordinates from WGS 84 to:");

		btnGroup.add(btnEPSG);
		btnEPSG.setSelected(true);
		btnEPSG.setText("EPSG:");

		txtEPSG.setText("4326");

		btnGroup.add(btnWKT);
		btnWKT.setText("Well-Known-Text:");

		txtWKT.setColumns(20);
		txtWKT.setRows(5);
		txtWKT.setEnabled(false);
		scrlWKT.setViewportView(txtWKT);

		btnOk.setText("OK");
		btnOk.setEnabled(false);

		btnCancel.setText("Cancel");

		lblInfo.setText(" ");

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
								.addComponent(lblInfo, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(layout.createSequentialGroup()
										.addComponent(scrlWKT, GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE))
										.addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
												.addComponent(btnCancel)
												.addPreferredGap(ComponentPlacement.RELATED)
												.addComponent(btnOk))
												.addGroup(layout.createSequentialGroup()
														.addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
																.addComponent(jLabel1)
																.addGroup(layout.createSequentialGroup()
																		.addComponent(btnEPSG)
																		.addPreferredGap(ComponentPlacement.RELATED)
																		.addComponent(txtEPSG, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
																		.addComponent(btnWKT))
														))
														.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(jLabel1)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
								.addComponent(btnEPSG)
								.addComponent(txtEPSG, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(ComponentPlacement.RELATED)
								.addComponent(btnWKT)
								.addPreferredGap(ComponentPlacement.RELATED)
								.addComponent(scrlWKT, GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
								.addPreferredGap(ComponentPlacement.RELATED)
								.addComponent(lblInfo)
								.addPreferredGap(ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
										.addComponent(btnOk)
										.addComponent(btnCancel))
										.addContainerGap())
				);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void setupComponents() {
		this.getRootPane().setDefaultButton(this.btnOk);
		
		this.btnEPSG.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent ce) {
				txtEPSG.setEnabled(btnEPSG.isSelected());
				txtWKT.setEnabled(!btnEPSG.isSelected());
			}
		});

		this.btnWKT.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent ce) {
				txtEPSG.setEnabled(btnWKT.isSelected());
				txtWKT.setEnabled(!btnWKT.isSelected());
			}
		});

		txtEPSG.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void removeUpdate(DocumentEvent e) {
				lookupCRS("EPSG:" + txtEPSG.getText());
			}
			
			@Override
			public void insertUpdate(DocumentEvent e) {
				lookupCRS("EPSG:" + txtEPSG.getText());
			}
			
			@Override
			public void changedUpdate(DocumentEvent e) {
				lookupCRS("EPSG:" + txtEPSG.getText());
			}
		});

		txtWKT.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void removeUpdate(DocumentEvent e) {
				lookupCRS(txtWKT.getText());
			}

			@Override
			public void insertUpdate(DocumentEvent e) {
				lookupCRS(txtWKT.getText());
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				lookupCRS(txtWKT.getText());
			}
		});
		
		btnCancel.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				identifiedCrsString = null;
				setVisible(false);
			}
		});
		
		btnOk.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				setVisible(false);
			}
		});
	}
	
	public String getIdentifiedCrsString() {
		return this.identifiedCrsString;
	}

	private void lookupCRS(final String desc) {
		try {
			CoordinateReferenceSystem crs = MGC.getCRS(desc);
			lblInfo.setText(crs.getName().toString());
			identifiedCrsString = desc;
			btnOk.setEnabled(true);
		} catch (IllegalArgumentException e) {
			lblInfo.setText("not recognized");
			btnOk.setEnabled(false);
		}
	}

}
